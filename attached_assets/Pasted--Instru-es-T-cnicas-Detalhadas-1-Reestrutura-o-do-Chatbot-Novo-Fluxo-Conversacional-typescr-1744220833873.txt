 Instru√ß√µes T√©cnicas Detalhadas
1. Reestrutura√ß√£o do Chatbot
Novo Fluxo Conversacional:

typescript
Copy
const fluxoConversa = {
  saudacao: {
    pergunta: "Ol√°! Sou o assistente da SEMAPA. Sobre qual setor deseja informa√ß√µes?",
    opcoes: ["Agricultura", "Pesca", "PAA", "Secretaria"],
    redirecionamento: {
      "Agricultura": "fluxoAgricultura",
      "Pesca": "fluxoPesca",
      // ...
    }
  },
  fluxoAgricultura: {
    informativo: [
      "üìå O setor agr√≠cola oferece:",
      "- Assist√™ncia t√©cnica rural",
      "- Programas de mecaniza√ß√£o",
      "- Acesso a insumos agr√≠colas",
      "Deseja: [Mais Informa√ß√µes] ou [Solicitar Servi√ßo]?"
    ],
    acoes: {
      "Solicitar Servi√ßo": "abrirFormulario('agricultura')",
      "Mais Informa√ß√µes": "detalhesAgricultura"
    }
  }
}
2. Sistema de Formul√°rios Setoriais
Estrutura de Pastas:

Copy
/src  
  /forms  
    /agricultura  
      - FormDadosPessoais.tsx  
      - FormDadosAgricolas.tsx  
      - FormServicos.tsx  
      - index.ts (formul√°rio unificado)  
    /pesca  
      - [...]
Componente de Redirecionamento:

typescript
Copy
// No chatbot
const abrirFormulario = (setor: string) => {
  // Salva contexto da conversa
  localStorage.setItem('chatContext', JSON.stringify(ultimasMensagens)); 
  window.open(`/forms/${setor}`, '_blank');
  return "Abrindo formul√°rio...";
};
3. Integra√ß√£o entre Sistemas
Passagem de Contexto:

typescript
Copy
// Nos formul√°rios (ex: FormAgricultura.tsx)
useEffect(() => {
  const chatContext = localStorage.getItem('chatContext');
  if (chatContext) {
    const { intencao, dadosParciais } = JSON.parse(chatContext);
    // Preenche campos automaticamente
    setFormData(prev => ({ ...prev, ...dadosParciais }));
  }
}, []);
Estrutura Firebase:

javascript
Copy
// Cole√ß√µes no Firestore
cadastros_agricultura: {
  userId: string,
  dadosPessoais: { ... },
  dadosAgricolas: { ... },
  servicosSolicitados: [ ... ],
  origem: "chatbot" | "formulario_direto"
}
üîÑ Fluxo de Trabalho Recomendado
Fase 1 - Desacoplar o Chatbot

Remova toda a l√≥gica de cadastro do arquivo atual

Implemente o novo sistema de inten√ß√µes (informar vs solicitar)

Fase 2 - Criar Templates de Formul√°rios

bash
Copy
# Exemplo de componente usando ShadCN UI
npx shadcn-ui@latest add form
Fase 3 - Sistema de Contexto Compartilhado

Desenvolva um hook useChatContext() para gerenciar dados entre chat/formul√°rios

Fase 4 - Painel de Controle

Crie uma view /admin para t√©cnicos acessarem solicita√ß√µes

üé® Exemplo de UI Otimizada
Chatbot (Novo Visual):

tsx
Copy
<div className="bg-white/90 backdrop-blur-sm rounded-t-lg border">
  {/* Cabe√ßalho com tabs de setores */}
  <Tabs defaultValue="agricultura">
    <TabsList className="grid grid-cols-3">
      <TabsTrigger value="agricultura">üå± Agricultura</TabsTrigger>
      <TabsTrigger value="pesca">üé£ Pesca</TabsTrigger>
      <TabsTrigger value="paa">üõí PAA</TabsTrigger>
    </TabsList>
    {/* Conte√∫do informativo por tab */}
  </Tabs>
  
  {/* Bot√£o fixo de a√ß√£o */}
  <Button 
    onClick={() => abrirFormulario(setorAtivo)}
    className="mt-4 bg-green-600 hover:bg-green-700"
  >
    Solicitar Servi√ßo
  </Button>
</div>
Formul√°rio Setorial:

tsx
Copy
<Card>
  <CardHeader>
    <CardTitle className="text-green-800">Cadastro Agr√≠cola</CardTitle>
    <CardDescription>Preencha seus dados e solicita√ß√µes</CardDescription>
  </CardHeader>
  <CardContent>
    <Stepper steps={['Dados Pessoais', 'Propriedade', 'Servi√ßos']}>
      {/* Conte√∫do din√¢mico por passo */}
    </Stepper>
  </CardContent>
</Card>
üìä M√©tricas de Sucesso
Indicador	Meta
Taxa de conclus√£o	>85% nos forms
Tempo m√©dio por intera√ß√£o	<2 min no chat
Redu√ß√£o de erros	-60% nos dados
üîß Stack Recomendada
Formul√°rios: React Hook Form + Zod (valida√ß√£o)

UI: ShadCN/Radix (acessibilidade)

Navega√ß√£o: Zustand (gerenciamento de estado global)

Analytics: Firebase Events (rastrear fluxos)