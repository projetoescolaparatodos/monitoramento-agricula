O problema pode estar relacionado à falta de alguma biblioteca ou componente na página Agriculture que esteja disponível na página Home.

Bibliotecas para Visualização de Gráficos
Para renderizar gráficos em React, você precisa de uma biblioteca de visualização de dados. As mais comuns são:

Chart.js + react-chartjs-2: A combinação mais popular para gráficos no React
Recharts: Uma biblioteca React para gráficos
D3.js: Mais poderosa, mas também mais complexa
Victory: Biblioteca focada em React
O que pode estar faltando na página Agriculture
1. Importação do Componente de Gráfico
Na página Agriculture, você pode estar usando o componente InfoPage, mas talvez este componente não esteja importando corretamente o componente de gráfico. Verifique:

// No InfoPage.tsx, verifique se existe uma importação como:
import { ChartComponent } from "@/components/common/ChartComponent";
// ou
import ChartComponent from "@/components/common/ChartComponent";
2. Dependências de Biblioteca
Verifique se todas as bibliotecas necessárias estão sendo importadas no InfoPage ou no ChartComponent:

// Para Chart.js + react-chartjs-2:
import { Chart, registerables } from 'chart.js';
import { Bar, Line, Pie } from 'react-chartjs-2';
Chart.register(...registerables);
// OU para Recharts:
import { BarChart, LineChart, PieChart, Bar, Line, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
3. Componente de Renderização de Gráfico Incompleto
O componente que renderiza os gráficos pode não estar lidando com todos os tipos de gráficos. Por exemplo:

// Um ChartComponent que só implementa 'bar' e 'line', mas não 'pie'
const ChartComponent = ({ chartType, chartData }) => {
  if (chartType === 'bar') {
    return <Bar data={chartData} />;
  } else if (chartType === 'line') {
    return <Line data={chartData} />;
  }
  // Falta implementação para 'pie' e outros tipos
  return <div>Tipo de gráfico não suportado: {chartType}</div>;
};
Como Verificar e Corrigir
1. Examine o InfoPage e ChartComponent
// Verifique se o InfoPage está renderizando o componente de gráfico:
{charts && charts.length > 0 && (
  <section>
    {charts.map((chart) => (
      <ChartComponent 
        key={chart.id}
        chartType={chart.chartType} 
        chartData={chart.chartData} 
      />
    ))}
  </section>
)}
// Verifique se o ChartComponent suporta todos os tipos necessários:
const ChartComponent = ({ chartType, chartData }) => {
  console.log("Renderizando gráfico tipo:", chartType);
  
  // Suporte para diferentes tipos de gráficos
  switch(chartType) {
    case 'bar':
      return <Bar data={chartData} options={...} />;
    case 'line':
      return <Line data={chartData} options={...} />;
    case 'pie':
      return <Pie data={chartData} options={...} />;
    case 'doughnut':
      return <Doughnut data={chartData} options={...} />;
    default:
      console.warn(`Tipo de gráfico não suportado: ${chartType}`);
      return <div>Tipo de gráfico não implementado: {chartType}</div>;
  }
};
2. Verifique se as Bibliotecas estão Instaladas
Verifique se tem as dependências necessárias no package.json. Se estiverem faltando:

npm install chart.js react-chartjs-2
# ou
npm install recharts
3. Implementação Completa de ChartComponent
Se você precisar implementar um componente completo de gráficos:

// components/common/ChartComponent.tsx
import React from 'react';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, BarElement } from 'chart.js';
import { Bar, Line, Pie } from 'react-chartjs-2';
// Registrar os componentes necessários do Chart.js
ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, BarElement);
interface ChartComponentProps {
  chartType: string;
  chartData: {
    labels: string[];
    datasets: {
      label?: string;
      data: number[];
      backgroundColor?: string | string[];
      borderColor?: string | string[];
      borderWidth?: number;
    }[];
  };
}
const ChartComponent: React.FC<ChartComponentProps> = ({ chartType, chartData }) => {
  // Log para debug
  console.log(`Renderizando gráfico tipo ${chartType} com dados:`, chartData);
  
  // Opções padrão
  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      tooltip: {
        enabled: true,
      },
    },
  };
  // Renderizar diferentes tipos de gráficos
  switch (chartType.toLowerCase()) {
    case 'bar':
      return <div style={{ height: '300px' }}><Bar data={chartData} options={options} /></div>;
    case 'line':
      return <div style={{ height: '300px' }}><Line data={chartData} options={options} /></div>;
    case 'pie':
      return <div style={{ height: '300px' }}><Pie data={chartData} options={options} /></div>;
    default:
      console.warn(`Tipo de gráfico não suportado: ${chartType}`);
      return (
        <div className="p-4 text-center bg-gray-100 rounded-lg">
          <p>Tipo de gráfico não suportado: {chartType}</p>
        </div>
      );
  }
};
export default ChartComponent;
4. Verifique como a página Home renderiza gráficos
Compare o código da página Home (que funciona) com a Agriculture:

A Home pode estar usando um componente específico para gráficos
Ela pode ter importações adicionais
Pode haver diferenças na forma como os dados são processados antes de serem passados ao componente de gráfico
Estas verificações e implementações devem ajudar a identificar se o problema está relacionado à falta de bibliotecas ou componentes necessários para a renderização de gráficos na página Agriculture.