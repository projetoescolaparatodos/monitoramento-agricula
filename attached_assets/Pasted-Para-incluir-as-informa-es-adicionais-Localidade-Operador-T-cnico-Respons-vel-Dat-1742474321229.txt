Para incluir as informa√ß√µes adicionais (**Localidade**, **Operador**, **T√©cnico Respons√°vel**, **Data**, **Status**) e garantir que elas sejam atualizadas tanto na √°rea do administrador quanto reflitam no relat√≥rio do mapa de pesca, voc√™ precisar√° de uma abordagem mais abrangente. Vou te guiar passo a passo:

---

### 1. Atualiza√ß√£o da Estrutura de Dados
Primeiro, atualize a estrutura de dados para incluir os novos campos:

```javascript
const dadosPesca = [
    {
        "N¬∞ de Registro": "12345",
        "Tipo de Ambiente de Cultivo": "Tanque Rede",
        "√Årea do im√≥vel": "10 ha",
        "√Årea Alagada ha": "5 ha",
        "Ciclo de produ√ß√£o": "6 meses",
        "Sistema de cultivo": "Intensivo",
        "Esp√©cie": "Til√°pia",
        "Localidade": "Lagoa Azul",
        "Operador": "Jo√£o Silva",
        "T√©cnico Respons√°vel": "Maria Souza",
        "Data": "10/03/2025",
        "Status": "Ativo"
    },
    {
        "N¬∞ de Registro": "67890",
        "Tipo de Ambiente de Cultivo": "Viveiro",
        "√Årea do im√≥vel": "20 ha",
        "√Årea Alagada ha": "10 ha",
        "Ciclo de produ√ß√£o": "8 meses",
        "Sistema de cultivo": "Semi-intensivo",
        "Esp√©cie": "Carpa",
        "Localidade": "Rio Verde",
        "Operador": "Pedro Almeida",
        "T√©cnico Respons√°vel": "Ana Lima",
        "Data": "10/03/2025",
        "Status": "Inativo"
    }
];
```

---

### 2. Atualiza√ß√£o dos Popups no Mapa
Atualize o conte√∫do dos popups para incluir as novas informa√ß√µes:

```javascript
dadosPesca.forEach(pesca => {
    const popupContent = `
        <b>Pesca</b><br>
        N¬∞ de Registro: ${pesca["N¬∞ de Registro"]}<br>
        Localidade: ${pesca["Localidade"]}<br>
        Operador: ${pesca["Operador"]}<br>
        T√©cnico Respons√°vel: ${pesca["T√©cnico Respons√°vel"]}<br>
        Data: ${pesca["Data"]}<br>
        Status: ${pesca["Status"]}<br>
        Tipo de Ambiente de Cultivo: ${pesca["Tipo de Ambiente de Cultivo"]}<br>
        √Årea do im√≥vel: ${pesca["√Årea do im√≥vel"]}<br>
        √Årea Alagada ha: ${pesca["√Årea Alagada ha"]}<br>
        Ciclo de produ√ß√£o: ${pesca["Ciclo de produ√ß√£o"]}<br>
        Sistema de cultivo: ${pesca["Sistema de cultivo"]}<br>
        Esp√©cie: ${pesca["Esp√©cie"]}
    `;

    // Adicionando um marcador com o popup
    L.marker([-15.7801, -47.9292]) // Substitua pelas coordenadas reais
        .addTo(map)
        .bindPopup(popupContent);
});
```

---

### 3. √Årea do Administrador
Para que as informa√ß√µes sejam atualizadas na √°rea do administrador, voc√™ precisar√° de um backend para persistir os dados e um frontend para exibi-los. Aqui est√° um exemplo simplificado:

#### Backend (Node.js + Express + Banco de Dados)
- Crie uma API para atualizar e buscar os dados de pesca.
- Exemplo de rota para atualizar dados:

```javascript
app.put('/api/pesca/:id', (req, res) => {
    const id = req.params.id;
    const novosDados = req.body;

    // Atualize os dados no banco de dados
    database.atualizarPesca(id, novosDados)
        .then(() => res.send("Dados atualizados com sucesso!"))
        .catch(err => res.status(500).send("Erro ao atualizar dados."));
});
```

#### Frontend (Admin)
- Crie um formul√°rio para editar as informa√ß√µes de pesca.
- Use JavaScript para enviar os dados atualizados para o backend.

```html
<form id="formPesca">
    <input type="text" name="localidade" placeholder="Localidade">
    <input type="text" name="operador" placeholder="Operador">
    <input type="text" name="tecnico" placeholder="T√©cnico Respons√°vel">
    <input type="date" name="data" placeholder="Data">
    <select name="status">
        <option value="Ativo">Ativo</option>
        <option value="Inativo">Inativo</option>
    </select>
    <button type="submit">Atualizar</button>
</form>

<script>
    document.getElementById('formPesca').addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = new FormData(this);

        fetch('/api/pesca/12345', { // Substitua 12345 pelo ID correto
            method: 'PUT',
            body: JSON.stringify(Object.fromEntries(formData)),
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.text())
        .then(message => alert(message))
        .catch(error => console.error(error));
    });
</script>
```

---

### 4. Relat√≥rio do Mapa de Pesca
Para que as altera√ß√µes reflitam no relat√≥rio, voc√™ pode:

- **Atualizar o relat√≥rio dinamicamente**: Use os dados atualizados no backend para gerar o relat√≥rio em tempo real.
- **Exportar dados**: Crie uma fun√ß√£o para exportar os dados atualizados para um formato de relat√≥rio (PDF, Excel, etc.).

Exemplo de exporta√ß√£o para JSON:

```javascript
function exportarRelatorio() {
    const relatorio = JSON.stringify(dadosPesca, null, 2);
    const blob = new Blob([relatorio], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = 'relatorio_pesca.json';
    a.click();
}
```

---

### 5. Fluxo Completo
1. **Atualiza√ß√£o no Admin**: O administrador atualiza os dados no formul√°rio.
2. **Persist√™ncia no Backend**: Os dados s√£o enviados para o backend e salvos no banco de dados.
3. **Atualiza√ß√£o no Mapa**: O mapa busca os dados atualizados do backend e exibe os popups com as novas informa√ß√µes.
4. **Gera√ß√£o do Relat√≥rio**: O relat√≥rio √© gerado com base nos dados atualizados.

---

Se precisar de mais detalhes ou ajuda com alguma parte espec√≠fica, √© s√≥ avisar! üòä