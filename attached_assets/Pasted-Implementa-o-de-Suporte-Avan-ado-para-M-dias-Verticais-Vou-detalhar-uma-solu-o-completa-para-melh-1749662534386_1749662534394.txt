Implementação de Suporte Avançado para Mídias Verticais
Vou detalhar uma solução completa para melhorar a exibição de mídias verticais, especialmente as originadas do Instagram, com controle pelo painel do gestor.

1. Ampliação da Interface MediaItem
Primeiro, vamos estender a interface para incluir opções específicas de proporção:

typescript
interface MediaItem {
  // ... outros campos existentes
  aspectRatio: '1:1' | '16:9' | '9:16' | '4:5' | 'custom'; // Proporções comuns
  customAspectRatio?: string; // Para casos específicos no formato "width:height"
  displayMode?: 'contain' | 'cover' | 'fill'; // Como a mídia deve se ajustar ao container
  verticalPadding?: number; // Espaçamento adicional para vertical
}
2. Componente de Upload no Dashboard
No painel do gestor, vamos criar um seletor de proporção:

tsx
import { AspectRatioSelector } from '@/components/ui/aspect-ratio-selector';

const MediaUploadForm = () => {
  const [aspectRatio, setAspectRatio] = useState<MediaItem['aspectRatio']>('16:9');
  const [customRatio, setCustomRatio] = useState('9:16');
  const [displayMode, setDisplayMode] = useState<MediaItem['displayMode']>('contain');

  return (
    <div className="space-y-4">
      {/* Outros campos do formulário */}
      
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-1">Proporção da Mídia</label>
          <select
            value={aspectRatio}
            onChange={(e) => setAspectRatio(e.target.value as MediaItem['aspectRatio'])}
            className="w-full p-2 border rounded"
          >
            <option value="16:9">Horizontal (16:9)</option>
            <option value="9:16">Vertical (9:16)</option>
            <option value="1:1">Quadrada (1:1)</option>
            <option value="4:5">Retrato (4:5)</option>
            <option value="custom">Personalizada</option>
          </select>
          
          {aspectRatio === 'custom' && (
            <div className="mt-2">
              <label className="block text-sm font-medium mb-1">Proporção Customizada</label>
              <input
                type="text"
                value={customRatio}
                onChange={(e) => setCustomRatio(e.target.value)}
                placeholder="width:height"
                className="w-full p-2 border rounded"
              />
            </div>
          )}
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-1">Modo de Exibição</label>
          <select
            value={displayMode}
            onChange={(e) => setDisplayMode(e.target.value as MediaItem['displayMode'])}
            className="w-full p-2 border rounded"
          >
            <option value="contain">Ajustar (contain)</option>
            <option value="cover">Preencher (cover)</option>
            <option value="fill">Esticar (fill)</option>
          </select>
        </div>
      </div>
      
      {/* Visualização em tempo real */}
      <div className="mt-4">
        <label className="block text-sm font-medium mb-1">Pré-visualização</label>
        <div className="border p-4 rounded-lg bg-gray-50">
          <MediaPreview 
            aspectRatio={aspectRatio === 'custom' ? customRatio : aspectRatio}
            displayMode={displayMode}
          />
        </div>
      </div>
    </div>
  );
};
3. Componente de Pré-visualização
tsx
const MediaPreview = ({ aspectRatio, displayMode }: { aspectRatio: string, displayMode: string }) => {
  const [width, height] = aspectRatio.split(':').map(Number);
  const ratioPercent = (height / width) * 100;
  
  return (
    <div className="mx-auto" style={{ maxWidth: '300px' }}>
      <div 
        className="relative bg-gray-200 border border-gray-300 overflow-hidden"
        style={{ paddingBottom: `${ratioPercent}%` }}
      >
        <div className="absolute inset-0 flex items-center justify-center">
          <div className={`bg-blue-100 border-2 border-dashed border-blue-400 
            ${displayMode === 'cover' ? 'w-full h-full' : ''}
            ${displayMode === 'contain' ? 'max-w-full max-h-full' : ''}
            ${displayMode === 'fill' ? 'w-full h-full' : ''}`}
          >
            <span className="text-xs text-blue-600">
              {aspectRatio} ({displayMode})
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};
4. Adaptação do MediaDisplay para Mídias Verticais
Vamos modificar o componente principal para lidar com as novas propriedades:

tsx
const MediaDisplay = ({ item }: { item: MediaItem }) => {
  // ... lógica existente

  const getAspectRatioClass = () => {
    switch(item.aspectRatio) {
      case '9:16':
        return 'aspect-[9/16]';
      case '1:1':
        return 'aspect-square';
      case '4:5':
        return 'aspect-[4/5]';
      case 'custom':
        if (item.customAspectRatio) {
          const [w, h] = item.customAspectRatio.split(':');
          return `aspect-[${w}/${h}]`;
        }
        return 'aspect-video';
      default:
        return 'aspect-video';
    }
  };

  const getObjectFitClass = () => {
    switch(item.displayMode) {
      case 'cover':
        return 'object-cover';
      case 'fill':
        return 'object-fill';
      default:
        return 'object-contain';
    }
  };

  const renderMedia = () => {
    if (item.mediaType === 'video') {
      return (
        <video
          className={`rounded-t-lg w-full ${getAspectRatioClass()} ${getObjectFitClass()}`}
          controls
          src={item.mediaUrl}
          poster={item.thumbnailUrl}
        />
      );
    }
    
    return (
      <img
        className={`rounded-t-lg w-full ${getAspectRatioClass()} ${getObjectFitClass()}`}
        src={item.mediaUrl}
        alt={item.title || 'Imagem'}
      />
    );
  };

  return (
    <div className={`media-card ${item.aspectRatio === '9:16' ? 'vertical-media' : ''}`}>
      {renderMedia()}
      {/* Resto do conteúdo do card */}
    </div>
  );
};
5. Estilos CSS para Mídias Verticais
Adicione estilos específicos para melhorar a exibição vertical:

css
.vertical-media {
  @apply max-w-md mx-auto; /* Limita a largura máxima para mídias verticais */
}

/* Classes de proporção dinâmica */
.aspect-\[9\/16\] {
  aspect-ratio: 9/16;
}

.aspect-\[4\/5\] {
  aspect-ratio: 4/5;
}

/* Ajustes para cards verticais em grid */
@media (min-width: 768px) {
  .vertical-media {
    grid-row: span 2; /* Faz o card ocupar duas linhas no grid */
  }
}
6. Modificação no Backend para Armazenar Metadados
Atualize o esquema do Firestore para incluir os novos campos:

javascript
// No seu schema de validação ou modelo de dados
const mediaSchema = {
  aspectRatio: {
    type: String,
    enum: ['1:1', '16:9', '9:16', '4:5', 'custom'],
    default: '16:9'
  },
  customAspectRatio: {
    type: String,
    optional: true,
    regex: /^\d+:\d+$/ // Valida formato width:height
  },
  displayMode: {
    type: String,
    enum: ['contain', 'cover', 'fill'],
    default: 'contain'
  }
};