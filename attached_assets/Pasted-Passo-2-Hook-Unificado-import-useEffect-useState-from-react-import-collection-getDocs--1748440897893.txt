Passo 2: Hook Unificado

import { useEffect, useState } from 'react';
import { collection, getDocs, query, orderBy } from 'firebase/firestore';
import { db } from '@/firebase/config';

export function useSolicitacoes() {
  const [solicitacoes, setSolicitacoes] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const colecoes = [
    { nome: 'solicitacoes_agricultura_completo', tipo: 'agricultura_completo' },
    { nome: 'solicitacoes_agricultura', tipo: 'agricultura' },
    { nome: 'solicitacoes_pesca_completo', tipo: 'pesca_completo' },
    { nome: 'solicitacoes_pesca', tipo: 'pesca' },
    { nome: 'solicitacoes_paa', tipo: 'paa' },
    { nome: 'solicitacoes_servicos', tipo: 'servicos' }
  ];

  const fetchSolicitacoes = async () => {
    setLoading(true);
    setError(null);

    try {
      const todasSolicitacoes: any[] = [];

      for (const { nome, tipo } of colecoes) {
        const q = query(collection(db, nome), orderBy('timestamp', 'desc'));
        const snapshot = await getDocs(q);

        const docs = snapshot.docs.map(doc => 
          normalizarSolicitacao({ id: doc.id, ...doc.data() }, tipo)
        );

        todasSolicitacoes.push(...docs);
      }

      setSolicitacoes(todasSolicitacoes);
    } catch (e: any) {
      console.error('Erro ao buscar solicitaÃ§Ãµes:', e);
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchSolicitacoes();
  }, []);

  return {
    solicitacoes,
    loading,
    error,
    refetch: fetchSolicitacoes
  };
}

ğŸ”¥ Passo 3: Melhorias no Card e Modal

ğŸ‘‰ No SolicitacaoCard.tsx, garanta que vocÃª estÃ¡ usando os campos normalizados:

<SolicitacaoCard
  nome={solicitacao.nome}
  cpf={solicitacao.cpf}
  tipoServico={solicitacao.tipoServico}
  status={solicitacao.status}
  enderecoPropriedade={solicitacao.enderecoPropriedade}
  timestamp={solicitacao.timestamp}
/>

ğŸ‘‰ E no Modal, alÃ©m dos dados bÃ¡sicos, vocÃª pode usar:

<pre>{JSON.stringify(solicitacao.raw, null, 2)}</pre>

âœ… Isso garante que todos os dados, inclusive os especÃ­ficos de cada formulÃ¡rio, estejam visÃ­veis para inspeÃ§Ã£o e relatÃ³rio.