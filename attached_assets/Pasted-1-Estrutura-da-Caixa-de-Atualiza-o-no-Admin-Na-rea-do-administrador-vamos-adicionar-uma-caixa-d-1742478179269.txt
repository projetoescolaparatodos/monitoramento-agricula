1. Estrutura da Caixa de Atualização no Admin
Na área do administrador, vamos adicionar uma caixa de seleção (dropdown) e um botão para atualizar o status da atividade. Isso será replicado para cada um dos três mapas.

Exemplo de HTML:
html
Copy
<div class="atividade-admin">
    <h3>Atualizar Status da Atividade</h3>
    <select id="statusAtividade">
        <option value="Concluída">Concluída</option>
        <option value="Em Serviço">Em Serviço</option>
    </select>
    <button onclick="atualizarStatus()">Atualizar Status</button>
</div>
Run HTML
2. Lógica para Atualizar o Status
Quando o botão for clicado, o status da atividade será atualizado no backend e refletirá no mapa, nos filtros e no relatório.

Exemplo de JavaScript:
javascript
Copy
function atualizarStatus() {
    const novoStatus = document.getElementById('statusAtividade').value;
    const idAtividade = 12345; // Substitua pelo ID da atividade selecionada

    // Envia o novo status para o backend
    fetch('/api/atualizarStatus', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: idAtividade, status: novoStatus })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Status atualizado com sucesso!");
            atualizarMapaEFiltros(idAtividade, novoStatus); // Atualiza o mapa e os filtros
        } else {
            alert("Erro ao atualizar o status.");
        }
    })
    .catch(error => console.error(error));
}
3. Atualização no Mapa
Quando o status for atualizado, o marcador no mapa deve refletir a mudança. Por exemplo, você pode alterar a cor do marcador ou o ícone com base no status.

Exemplo de Atualização no Mapa:
javascript
Copy
function atualizarMapaEFiltros(idAtividade, novoStatus) {
    // Encontre o marcador no mapa (supondo que você tenha uma lista de marcadores)
    const marcador = marcadores.find(m => m.id === idAtividade);

    if (marcador) {
        // Atualize o ícone ou a cor do marcador com base no status
        const icone = novoStatus === "Concluída" ? iconeVerde : iconeVermelho;
        marcador.setIcon(icone);

        // Atualize o conteúdo do popup
        const popupContent = marcador.getPopup().getContent();
        const novoConteudo = popupContent.replace(/Status: .*<br>/, `Status: ${novoStatus}<br>`);
        marcador.setPopupContent(novoConteudo);
    }

    // Atualize os filtros (se aplicável)
    atualizarFiltros();
}
4. Atualização nos Filtros
Se houver filtros no mapa (por exemplo, para mostrar apenas atividades "Concluídas" ou "Em Serviço"), eles devem ser atualizados automaticamente.

Exemplo de Atualização de Filtros:
javascript
Copy
function atualizarFiltros() {
    const filtroStatus = document.getElementById('filtroStatus').value;

    marcadores.forEach(marcador => {
        const status = marcador.getPopup().getContent().match(/Status: (.*)<br>/)[1];
        if (filtroStatus === "Todos" || status === filtroStatus) {
            marcador.addTo(map); // Mostra o marcador
        } else {
            marcador.removeFrom(map); // Oculta o marcador
        }
    });
}
5. Atualização no Relatório
O relatório deve ser gerado com base nos dados atualizados. Se o relatório for gerado dinamicamente, ele já refletirá as mudanças. Caso contrário, você pode forçar a atualização do relatório após a mudança de status.

Exemplo de Atualização do Relatório:
javascript
Copy
function gerarRelatorio() {
    fetch('/api/gerarRelatorio')
        .then(response => response.json())
        .then(data => {
            const relatorio = JSON.stringify(data, null, 2);
            console.log("Relatório atualizado:", relatorio);
            // Aqui você pode exibir o relatório na interface ou exportá-lo
        })
        .catch(error => console.error(error));
}
6. Integração com os Três Mapas
Para aplicar essa funcionalidade em todos os três mapas, você pode:

Replicar a Estrutura: Adicione a caixa de seleção e o botão de atualização para cada mapa na área do administrador.

Identificar o Mapa: Use um identificador único para cada mapa (por exemplo, idMapa1, idMapa2, idMapa3) e passe esse identificador para o backend ao atualizar o status.

Sincronizar Dados: Garanta que o backend atualize os dados corretamente para cada mapa e que as mudanças sejam refletidas em todos os lugares.

Exemplo de Identificação do Mapa:
javascript
Copy
function atualizarStatus(idMapa) {
    const novoStatus = document.getElementById(`statusAtividade${idMapa}`).value;
    const idAtividade = 12345; // Substitua pelo ID da atividade selecionada

    fetch('/api/atualizarStatus', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: idAtividade, status: novoStatus, mapa: idMapa })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Status atualizado com sucesso!");
            atualizarMapaEFiltros(idAtividade, novoStatus, idMapa); // Passa o ID do mapa
        } else {
            alert("Erro ao atualizar o status.");
        }
    })
    .catch(error => console.error(error));
}
7. Resumo
Caixa de Seleção e Botão: Adicionados na área do admin para cada mapa.

Atualização do Status: Envia o novo status para o backend e atualiza o mapa, os filtros e o relatório.

Sincronização: Garante que as mudanças sejam refletidas em todos os três mapas.