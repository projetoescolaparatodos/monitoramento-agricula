Perfeito, agora vamos detalhar as implementa√ß√µes solicitadas para a tela de Relat√≥rios e os ajustes nas informa√ß√µes da Agricultura, Pesca e PAA. Vou incluir a convers√£o do tempo de Agricultura em horas, a adi√ß√£o da funcionalidade de baixar o relat√≥rio em PDF e garantir que tudo esteja organizado e funcional.

---

### Altera√ß√µes na Tela de Relat√≥rios

#### 1. Convers√£o de Tempo de Agricultura para Horas

**Objetivo**: No relat√≥rio de Agricultura, os dados de "hora/m√°quina" devem ser convertidos para horas. Isso implica a manipula√ß√£o e exibi√ß√£o correta dos valores.

**Implementa√ß√£o**:

- **Converter o tempo de Agricultura para horas**: Vamos ajustar a exibi√ß√£o no relat√≥rio para garantir que o tempo de opera√ß√£o seja convertido corretamente, caso seja fornecido em outra unidade, como minutos ou fra√ß√µes de horas.

- **Onde alterar**: No componente do Relat√≥rio de Agricultura, ao exibir o tempo, ser√° necess√°rio aplicar a convers√£o.

**Exemplo de C√≥digo** (no componente `AgriculturaReport.tsx`):

```tsx
// Fun√ß√£o para converter tempo em minutos para horas
const convertToHours = (minutes: number) => {
  return (minutes / 60).toFixed(2);  // Retorna com 2 casas decimais
};

const AgriculturaReport = ({ data }) => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Relat√≥rio de Agricultura</h2>
      <table className="min-w-full table-auto mt-4">
        <thead>
          <tr>
            <th className="border px-4 py-2">Nome do Im√≥vel</th>
            <th className="border px-4 py-2">Tempo (Horas)</th>
            <th className="border px-4 py-2">√Årea (Hectares)</th>
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr key={index}>
              <td className="border px-4 py-2">{item.nomeImovel}</td>
              <td className="border px-4 py-2">{convertToHours(item.tempo)}</td>
              <td className="border px-4 py-2">{item.area}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AgriculturaReport;
```

- O `convertToHours` vai garantir que o tempo seja mostrado em horas, com 2 casas decimais.

#### 2. Fun√ß√£o para Baixar o Relat√≥rio em PDF

**Objetivo**: Implementar a fun√ß√£o para baixar o relat√≥rio em PDF, com formata√ß√£o clara e organizada.

**Implementa√ß√£o**:

1. **Instalar biblioteca para gerar PDFs**: Utilize a biblioteca `jsPDF` para gerar os PDFs diretamente no frontend.
   
   Comando para instala√ß√£o:
   ```bash
   npm install jspdf
   ```

2. **Adicionar a fun√ß√£o para gerar o PDF**: Vamos criar uma fun√ß√£o que captura os dados da tabela e gera o PDF.

3. **Criar um bot√£o para baixar o relat√≥rio em PDF**: Adicionar um bot√£o que, ao ser clicado, gera o PDF do relat√≥rio.

**Exemplo de C√≥digo** para a gera√ß√£o de PDF:

```tsx
import { jsPDF } from "jspdf";

const downloadPDF = () => {
  const doc = new jsPDF();
  doc.setFontSize(18);
  doc.text("Relat√≥rio de Agricultura", 20, 20);

  doc.setFontSize(12);
  const tableData = data.map(item => [
    item.nomeImovel,
    convertToHours(item.tempo),
    item.area
  ]);

  doc.autoTable({
    startY: 30,
    head: [["Nome do Im√≥vel", "Tempo (Horas)", "√Årea (Hectares)"]],
    body: tableData,
  });

  doc.save("relatorio_agricultura.pdf");
};

const AgriculturaReport = ({ data }) => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Relat√≥rio de Agricultura</h2>
      <button 
        onClick={downloadPDF} 
        className="mt-4 p-2 bg-blue-500 text-white rounded"
      >
        Baixar Relat√≥rio em PDF
      </button>
      <table className="min-w-full table-auto mt-6">
        <thead>
          <tr>
            <th className="border px-4 py-2">Nome do Im√≥vel</th>
            <th className="border px-4 py-2">Tempo (Horas)</th>
            <th className="border px-4 py-2">√Årea (Hectares)</th>
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr key={index}>
              <td className="border px-4 py-2">{item.nomeImovel}</td>
              <td className="border px-4 py-2">{convertToHours(item.tempo)}</td>
              <td className="border px-4 py-2">{item.area}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AgriculturaReport;
```

- **Detalhes**:
  - `jsPDF` √© usado para criar o PDF.
  - A fun√ß√£o `downloadPDF` coleta os dados da tabela, formata e gera o PDF com a fun√ß√£o `autoTable`, que cria a tabela no PDF.
  - O bot√£o "Baixar Relat√≥rio em PDF" chama a fun√ß√£o de download.

#### 3. Integra√ß√£o das Informa√ß√µes de Pesca e PAA ao Relat√≥rio

**Objetivo**: As informa√ß√µes dos outros dois mapas (Pesca e PAA) tamb√©m devem ser inclu√≠das no relat√≥rio. Isso garante que todos os dados relevantes sejam apresentados de forma consolidada.

**Implementa√ß√£o**:

1. **Adicionar as Se√ß√µes de Pesca e PAA** ao relat√≥rio. 
2. **Garantir que os dados sejam passados para o relat√≥rio** de maneira que o PDF inclua as informa√ß√µes de cada um dos setores (Agricultura, Pesca, PAA).

**Exemplo de C√≥digo para o Relat√≥rio Completo**:

```tsx
const fullReportData = {
  agricultura: agriculturaData,
  pesca: pescaData,
  paa: paaData
};

const downloadPDF = () => {
  const doc = new jsPDF();
  doc.setFontSize(18);
  doc.text("Relat√≥rio Completo", 20, 20);

  doc.setFontSize(12);
  
  // Relat√≥rio Agricultura
  doc.text("Agricultura", 20, 40);
  const agriculturaTableData = fullReportData.agricultura.map(item => [
    item.nomeImovel,
    convertToHours(item.tempo),
    item.area
  ]);
  doc.autoTable({
    startY: 50,
    head: [["Nome do Im√≥vel", "Tempo (Horas)", "√Årea (Hectares)"]],
    body: agriculturaTableData,
  });

  // Relat√≥rio Pesca
  doc.text("Pesca", 20, doc.lastAutoTable.finalY + 10);
  const pescaTableData = fullReportData.pesca.map(item => [
    item.nomeImovel,
    convertToHours(item.tempo),
    item.area
  ]);
  doc.autoTable({
    startY: doc.lastAutoTable.finalY + 20,
    head: [["Nome do Im√≥vel", "Tempo (Horas)", "√Årea (Hectares)"]],
    body: pescaTableData,
  });

  // Relat√≥rio PAA
  doc.text("PAA", 20, doc.lastAutoTable.finalY + 10);
  const paaTableData = fullReportData.paa.map(item => [
    item.nomeImovel,
    convertToHours(item.tempo),
    item.area
  ]);
  doc.autoTable({
    startY: doc.lastAutoTable.finalY + 20,
    head: [["Nome do Im√≥vel", "Tempo (Horas)", "√Årea (Hectares)"]],
    body: paaTableData,
  });

  doc.save("relatorio_completo.pdf");
};

const RelatorioPage = ({ agriculturaData, pescaData, paaData }) => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Relat√≥rio Completo</h2>
      <button 
        onClick={downloadPDF} 
        className="mt-4 p-2 bg-blue-500 text-white rounded"
      >
        Baixar Relat√≥rio Completo em PDF
      </button>
    </div>
  );
};

export default RelatorioPage;
```

- **Detalhes**:
  - Agora, o relat√≥rio PDF inclui as se√ß√µes de Agricultura, Pesca e PAA.
  - As tabelas s√£o geradas de forma sequencial, uma para cada setor.
  - O bot√£o para download no relat√≥rio agora gera o "Relat√≥rio Completo" com todos os dados.

---

### Resumo das Altera√ß√µes

1. **Convers√£o de Tempo para Horas**: Implementado a convers√£o de tempo para horas no relat√≥rio de Agricultura.
2. **Fun√ß√£o de Baixar Relat√≥rio em PDF**: Implementada a fun√ß√£o que gera o PDF do relat√≥rio completo, com as se√ß√µes de Agricultura, Pesca e PAA.
3. **Relat√≥rio Completo**: As informa√ß√µes de Pesca e PAA tamb√©m foram integradas ao relat√≥rio.

Com essas mudan√ßas, o sistema agora est√° preparado para gerar um relat√≥rio consolidado e funcional, incluindo a convers√£o de tempo e a exporta√ß√£o em PDF. Se precisar de mais ajustes, estou √† disposi√ß√£o! üòä