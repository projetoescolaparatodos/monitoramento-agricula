Passo 2: Configurar o Backend do Chatbot

Vamos criar os arquivos necessários para o backend:

cd chatbot/backend
npm init -y

Agora, vamos criar o arquivo server.js nessa pasta:

// chatbot/backend/server.js
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const admin = require('firebase-admin');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Inicializar Firebase (usando as mesmas credenciais do seu projeto principal)
// Se você já está usando Firebase no projeto principal, pode reutilizar a configuração
// Verifique se as variáveis de ambiente estão configuradas corretamente
const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS || '{}');

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

// Endpoint para salvar respostas do chatbot
app.post('/api/chatbot/save-response', async (req, res) => {
  try {
    const { userId, conversation, timestamp, respostas } = req.body;
    
    // Validação básica
    if (!respostas) {
      return res.status(400).send('Dados inválidos');
    }
    
    // Salvar no Firebase
    await db.collection('chatbot_respostas').add({
      userId,
      conversation,
      timestamp: timestamp || new Date().toISOString(),
      respostas,
      status: 'pendente' // Para que os administradores possam processar
    });
    
    res.status(200).json({ success: true, message: 'Dados salvos com sucesso!' });
  } catch (error) {
    console.error('Erro ao salvar respostas:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Endpoint para obter perguntas do questionário
app.get('/api/chatbot/questionarios/:setor', async (req, res) => {
  try {
    const { setor } = req.params;
    const questionariosRef = db.collection('questionarios').doc(setor);
    const doc = await questionariosRef.get();
    
    if (!doc.exists) {
      return res.status(404).json({ success: false, error: 'Questionário não encontrado' });
    }
    
    res.status(200).json({ success: true, data: doc.data() });
  } catch (error) {
    console.error('Erro ao buscar questionário:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Porta que não conflite com o servidor principal
const PORT = process.env.CHATBOT_PORT || 3001;
app.listen(PORT, () => console.log(`Servidor do chatbot rodando na porta ${PORT}`));

module.exports = app;

Em seguida, crie um arquivo package.json específico para este backend:

{
  "name": "chatbot-backend",
  "version": "1.0.0",
  "description": "Backend para o chatbot de agricultura",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.1",
    "express": "^4.18.2",
    "firebase-admin": "^11.11.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.3"
  }
}