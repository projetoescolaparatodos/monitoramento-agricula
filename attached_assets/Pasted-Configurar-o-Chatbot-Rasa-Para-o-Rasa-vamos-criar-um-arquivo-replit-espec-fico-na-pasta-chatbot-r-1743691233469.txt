Configurar o Chatbot Rasa

Para o Rasa, vamos criar um arquivo .replit específico na pasta chatbot/rasa_bot:

# chatbot/rasa_bot/.replit
run = "python3 -m venv venv && source venv/bin/activate && python3 -m pip install --upgrade pip && pip install rasa[full] && rasa shell"
language = "python3"

E um arquivo requirements.txt:

# chatbot/rasa_bot/requirements.txt
rasa[full]
requests

Passo 4: Integrar o Chatbot ao Projeto Principal

Agora, vamos criar um componente React para o widget do chatbot:

// client/src/components/common/ChatbotWidget.tsx
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { MessageCircle, Send, X } from 'lucide-react';

interface Message {
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const ChatbotWidget: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Inicialização do chatbot
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      // Mensagem de boas-vindas
      setMessages([
        {
          text: 'Olá! Sou o assistente virtual da Secretaria de Agricultura, Pesca e Abastecimento. Como posso ajudar você hoje?',
          isUser: false,
          timestamp: new Date()
        }
      ]);
    }
  }, [isOpen]);

  // Scroll para a última mensagem
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Simulação de resposta do chatbot
  // Em produção, isso se conectaria à API do Rasa
  const getBotResponse = async (userMessage: string) => {
    setIsLoading(true);
    
    // Simular uma chamada de API (substituir por chamada real ao Rasa)
    try {
      // Aqui viria a chamada real à API do Rasa
      // const response = await fetch('http://localhost:5005/webhooks/rest/webhook', ...
      
      // Para testes, usaremos respostas simuladas
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      let botResponse = 'Desculpe, não entendi. Poderia reformular sua pergunta?';
      
      // Respostas baseadas em palavras-chave simples
      if (userMessage.toLowerCase().includes('serviço')) {
        botResponse = 'Oferecemos diversos serviços para agricultores. Qual área você precisa de ajuda? 1. Agricultura 2. Pesca 3. PAA';
      } else if (userMessage.toLowerCase().includes('cadastro') || userMessage.toLowerCase().includes('registrar')) {
        botResponse = 'Para se cadastrar, preciso de algumas informações. Poderia me informar seu nome completo?';
      } else if (userMessage.toLowerCase().includes('agricultura')) {
        botResponse = 'Nossa Secretaria de Agricultura oferece diversos serviços como assistência técnica, mecanização agrícola e distribuição de mudas. O que você gostaria de saber especificamente?';
      } else if (userMessage.toLowerCase().includes('pesca')) {
        botResponse = 'O setor de Pesca oferece apoio aos pescadores locais. Você gostaria de saber sobre licenças, auxílios ou programas de capacitação?';
      }
      
      setMessages(prev => [...prev, {
        text: botResponse,
        isUser: false,
        timestamp: new Date()
      }]);
    } catch (error) {
      console.error('Erro ao obter resposta do chatbot:', error);
      setMessages(prev => [...prev, {
        text: 'Desculpe, ocorreu um erro na comunicação. Por favor, tente novamente mais tarde.',
        isUser: false,
        timestamp: new Date()
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;
    
    // Adicionar mensagem do usuário
    setMessages(prev => [...prev, {
      text: input,
      isUser: true,
      timestamp: new Date()
    }]);
    
    // Obter resposta do bot
    getBotResponse(input);
    
    // Limpar input
    setInput('');
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen ? (
        <Button 
          onClick={() => setIsOpen(true)} 
          className="rounded-full w-14 h-14 bg-green-600 hover:bg-green-700 text-white shadow-lg"
        >
          <MessageCircle size={24} />
        </Button>
      ) : (
        <Card className="w-80 sm:w-96 h-[500px] shadow-xl flex flex-col">
          <div className="bg-green-600 text-white p-3 flex justify-between items-center rounded-t-lg">
            <h3 className="font-medium">Assistente Virtual</h3>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setIsOpen(false)} 
              className="text-white hover:bg-green-700 h-8 w-8 p-0"
            >
              <X size={20} />
            </Button>
          </div>
          
          <CardContent className="p-0 flex-1 flex flex-col">
            <div className="flex-1 overflow-y-auto p-4">
              {messages.map((msg, idx) => (
                <div 
                  key={idx} 
                  className={`mb-4 ${msg.isUser ? 'text-right' : 'text-left'}`}
                >
                  <div 
                    className={`inline-block p-3 rounded-lg max-w-[80%] ${
                      msg.isUser 
                        ? 'bg-green-600 text-white rounded-tr-none' 
                        : 'bg-gray-100 text-gray-800 rounded-tl-none'
                    }`}
                  >
                    {msg.text}
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="text-left mb-4">
                  <div className="inline-block p-3 rounded-lg bg-gray-100 text-gray-800 rounded-tl-none">
                    <div className="flex space-x-2">
                      <div className="h-2 w-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="h-2 w-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      <div className="h-2 w-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.4s'}}></div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
            
            <form onSubmit={handleSubmit} className="p-3 border-t flex">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Digite sua mensagem..."
                className="flex-1 focus-visible:ring-green-600"
                disabled={isLoading}
              />
              <Button 
                type="submit" 
                size="icon" 
                disabled={isLoading || !input.trim()}
                className="ml-2 bg-green-600 hover:bg-green-700"
              >
                <Send size={18} />
              </Button>
            </form>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ChatbotWidget;