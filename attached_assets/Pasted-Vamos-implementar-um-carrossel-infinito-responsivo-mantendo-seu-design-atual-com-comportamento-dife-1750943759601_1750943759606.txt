Vamos implementar um carrossel infinito responsivo mantendo seu design atual, com comportamento diferenciado para mobile (2 linhas independentes). Segue a solução técnica:

1. Estrutura Base Atualizada
tsx
import { useRef, useEffect, useState } from 'react';
import { MediaItem } from '@/types';
import { Card } from '@/components/ui/card';
import MediaDisplay from '@/components/common/MediaDisplay';

interface MediaCarouselProps {
  mediaItems: MediaItem[];
}

export const MediaCarousel = ({ mediaItems }: MediaCarouselProps) => {
  const carouselRef = useRef<HTMLDivElement>(null);
  const [isMobile, setIsMobile] = useState(false);

  // Configuração responsiva
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 768);
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Lógica do carrossel infinito
  useEffect(() => {
    if (!carouselRef.current) return;

    const carousel = carouselRef.current;
    let animationFrame: number;
    const speed = 0.8; // Ajuste a velocidade aqui

    const animate = () => {
      carousel.scrollLeft += speed;
      
      // Reinicia ao chegar no final
      if (carousel.scrollLeft >= (carousel.scrollWidth / 2)) {
        carousel.scrollLeft = 0;
      }
      
      animationFrame = requestAnimationFrame(animate);
    };

    // Duplica os itens para efeito infinito
    const items = Array.from(carousel.children);
    items.forEach(item => {
      const clone = item.cloneNode(true);
      carousel.appendChild(clone);
    });

    animationFrame = requestAnimationFrame(animate);

    return () => {
      cancelAnimationFrame(animationFrame);
    };
  }, [mediaItems]);

  // Renderização otimizada
  const renderItems = () => (
    mediaItems.map((item) => (
      <div 
        key={item.id} 
        className={`
          flex-shrink-0 
          ${isMobile ? 'w-full px-2' : 'w-1/3 md:w-1/4 lg:w-1/5 px-4'}
        `}
      >
        <MediaDisplay 
          item={item}
          className="hover:scale-105 transition-transform"
        />
      </div>
    ))
  );

  return (
    <section className="py-12 bg-neutral-50 dark:bg-zinc-900">
      <div className="container mx-auto px-4">
        {/* Seu cabeçalho existente aqui */}
        
        {/* Carrossel Desktop (1 linha) */}
        <div 
          ref={carouselRef}
          className="hidden md:flex overflow-x-hidden py-6"
          style={{ scrollBehavior: 'smooth' }}
        >
          {renderItems()}
        </div>

        {/* Carrossel Mobile (2 linhas independentes) */}
        {isMobile && (
          <div className="md:hidden space-y-6">
            <div className="flex overflow-x-hidden py-2">
              {renderItems().filter((_, i) => i % 2 === 0)}
            </div>
            <div className="flex overflow-x-hidden py-2">
              {renderItems().filter((_, i) => i % 2 !== 0)}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};
2. CSS Complementar (global.css)
css
/* Suaviza a animação e esconde a barra de scroll */
.carousel-container::-webkit-scrollbar {
  display: none;
}

/* Mantém proporções dos cards */
.media-card {
  aspect-ratio: 16/9;
}

@media (max-width: 767px) {
  .mobile-line {
    scroll-snap-type: x mandatory;
  }
  .mobile-card {
    scroll-snap-align: start;
    min-width: 100%;
  }
}
3. Melhorias Implementadas:
Carrossel Infinito:

Duplicação dinâmica dos itens

Animação suave com requestAnimationFrame

Reinício automático (efeito looping)

Responsividade Avançada:

Mobile: 2 linhas independentes (odd/even)

Desktop: Scroll horizontal único

Detecta mudanças de tela automaticamente

Manutenção do Design Existente:

Preserva suas proporções (aspect-ratio)

Mantém classes de hover/animação

Respeita estrutura de cards atual

Otimizações:

Cancelamento de animationFrame no cleanup

Renderização condicional para mobile/desktop

Controle de velocidade ajustável

4. Como Personalizar:
tsx
// Para ajustar a velocidade, modifique:
const speed = 0.8; // Valores menores = mais lento

// Para alterar proporções mobile:
className={`${isMobile ? 'w-full' : 'w-1/3'}`}

// Para mudar número de linhas mobile:
{isMobile && (
  <>
    {/* Linha 1 - Ímpares */}
    <div className="flex...">
      {renderItems().filter((_, i) => i % 3 === 0)}
    </div>
    {/* Linha 2 - Pares */}
    <div className="flex...">
      {renderItems().filter((_, i) => i % 3 === 1)}
    </div>
    {/* Linha 3 */}
    <div className="flex...">
      {renderItems().filter((_, i) => i % 3 === 2)}
    </div>
  </>
)}