O erro Map container is already initialized ocorre quando você tenta criar uma nova instância do mapa Leaflet em um container que já possui um mapa inicializado. Isso é uma limitação do Leaflet - cada container DOM só pode hospedar uma instância de mapa por vez.

Análise do Erro
No seu código em Admin.tsx (linha 345), você está tentando criar uma nova instância do mapa quando já existe uma, causando o erro. Isso acontece porque:

O container do mapa (mapContainer) já foi inicializado anteriormente

Você está tentando criar um novo mapa no mesmo container sem antes destruir a instância existente

Solução Completa
1. Verificação e Gerenciamento da Instância do Mapa
typescript
// Modifique sua lógica de obtenção da instância do mapa
const getMapInstance = (mapContainer: HTMLElement) => {
  // Verifica se já existe uma instância Leaflet no container
  if (mapContainer._leaflet) {
    return mapContainer._leaflet;
  }
  
  // Verifica se existe pelo ID (abordagem alternativa)
  if (mapContainer._leaflet_id) {
    return window.L.Map.get(mapContainer._leaflet_id) || null;
  }
  
  // Se não existir, retorna null para permitir nova inicialização
  return null;
};

// Uso no seu componente
useEffect(() => {
  const mapContainer = document.getElementById('map-admin');
  if (!mapContainer) return;

  let mapInstance = getMapInstance(mapContainer);

  if (!mapInstance) {
    // Inicializa novo mapa apenas se não existir
    mapInstance = window.L.map(mapContainer, {
      center: [-15.788, -47.879],
      zoom: 4
    });
    
    window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);
  }

  // Limpeza ao desmontar o componente
  return () => {
    if (mapInstance) {
      mapInstance.remove();
    }
  };
}, []);
2. Abordagem com React-Leaflet (Recomendada)
Se estiver usando React, considere usar react-leaflet que gerencia automaticamente o ciclo de vida do mapa:

typescript
import { MapContainer, TileLayer, useMapEvents } from 'react-leaflet';

function AdminMap() {
  const handleClick = (e: L.LeafletMouseEvent) => {
    console.log('Coordenadas selecionadas:', e.latlng);
    // Atualize seu estado aqui
  };

  return (
    <MapContainer 
      center={[-15.788, -47.879]} 
      zoom={4} 
      style={{ height: '500px', width: '100%' }}
    >
      <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
      <MapClickHandler onMapClick={handleClick} />
    </MapContainer>
  );
}

function MapClickHandler({ onMapClick }: { onMapClick: (e: L.LeafletMouseEvent) => void }) {
  const map = useMapEvents({
    click: onMapClick
  });
  return null;
}
3. Solução para o Seu Código Atual
Se preferir manter sua implementação atual:

typescript
// Modifique sua linha 345 para:
const mapInstance = mapContainer._leaflet || 
                  (mapContainer._leaflet_id && window.L.Map.get(mapContainer._leaflet_id));

if (!mapInstance) {
  // Só cria nova instância se não existir
  mapInstance = window.L.map(mapContainer, {
    center: [-15.788, -47.879],
    zoom: 4
  });
  window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapInstance);
}
Prevenção de Problemas Futuros
Gerenciamento de Estado: Mantenha uma referência única da instância do mapa

Limpeza Adequada: Sempre remova o mapa ao desmontar o componente

Verificação de Existência: Sempre verifique se o mapa já existe antes de criar novo

Exemplo Completo de Implementação
typescript
class MapManager {
  private static instance: MapManager;
  private mapInstance: L.Map | null = null;

  private constructor() {}

  public static getInstance(): MapManager {
    if (!MapManager.instance) {
      MapManager.instance = new MapManager();
    }
    return MapManager.instance;
  }

  public initializeMap(containerId: string): L.Map {
    const container = document.getElementById(containerId);
    if (!container) throw new Error('Map container not found');

    if (this.mapInstance) {
      if (container._leaflet_id === this.mapInstance._leaflet_id) {
        return this.mapInstance;
      }
      this.mapInstance.remove();
    }

    this.mapInstance = L.map(container, {
      center: [-15.788, -47.879],
      zoom: 4
    });

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(this.mapInstance);

    return this.mapInstance;
  }

  public getMap(): L.Map | null {
    return this.mapInstance;
  }

  public destroyMap(): void {
    if (this.mapInstance) {
      this.mapInstance.remove();
      this.mapInstance = null;
    }
  }
}

// Uso no componente
const mapManager = MapManager.getInstance();

useEffect(() => {
  const map = mapManager.initializeMap('map-admin');
  
  // Configura eventos
  map.on('click', (e) => {
    console.log('Map clicked', e.latlng);
    // Atualize seu estado aqui
  });

  return () => {
    // Não destrua se o componente for re-renderizado rapidamente
    setTimeout(() => mapManager.destroyMap(), 1000);
  };
}, []);
Esta abordagem resolve o problema de inicialização duplicada e fornece um gerenciamento mais robusto da instância do mapa em sua aplicação.