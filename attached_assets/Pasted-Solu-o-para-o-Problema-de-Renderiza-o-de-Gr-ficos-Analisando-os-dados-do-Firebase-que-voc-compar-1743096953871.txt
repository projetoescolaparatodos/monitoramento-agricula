Solução para o Problema de Renderização de Gráficos
Analisando os dados do Firebase que você compartilhou, encontrei a possível causa do problema. O formato de dados do gráfico no Firebase parece estar correto, com a estrutura esperada:

pageType: "agriculture"
chartType: "pie"
chartData: {
  datasets: [{ ... }]
  labels: [ ... ]
}
Vamos implementar uma solução específica para a página Agriculture.

Possíveis causas para o gráfico não aparecer:
Problema de transformação dos dados: Os dados do Firebase podem estar em um formato aninhado que precisa ser transformado antes de usar
Diferenças na estrutura de objetos: Os dados do Firebase podem não estar sendo deserializados corretamente
Problema no componente InfoPage: Pode haver alguma condição no componente InfoPage que impede a renderização
Solução recomendada:
Vamos modificar o componente Agriculture para transformar explicitamente os dados do Firebase para o formato esperado pelo InfoPage:

// Modificação para o Agriculture.tsx
const { data: charts, isLoading: isLoadingCharts } = useQuery<ChartItem[]>({
  queryKey: ["charts", "agriculture"],
  queryFn: async () => {
    const snapshot = await getDocs(
      query(collection(db, "charts"), where("pageType", "==", "agriculture"))
    );
    
    console.log("Número de documentos encontrados:", snapshot.docs.length);
    
    return snapshot.docs.map((doc) => {
      const data = doc.data();
      
      // Garantir que chartData seja um objeto completo
      const chartData = {
        datasets: data.chartData?.datasets || [],
        labels: data.chartData?.labels || []
      };
      
      console.log("Processando gráfico:", {
        id: doc.id,
        title: data.title,
        chartType: data.chartType
      });
      
      // Retornar objeto formatado no padrão ChartItem
      return {
        id: doc.id,
        pageType: data.pageType,
        title: data.title || "",
        description: data.description || "",
        chartType: data.chartType || "bar",
        chartData: chartData,
        active: data.active !== false,
        order: data.order || 0,
        createdAt: data.createdAt || new Date().toISOString(),
        updatedAt: data.updatedAt || new Date().toISOString()
      };
    });
  },
});
Da mesma forma, vamos fazer para as mídias:

const { data: mediaItems, isLoading: isLoadingMedia } = useQuery<MediaItem[]>({
  queryKey: ["media", "agriculture"],
  queryFn: async () => {
    const snapshot = await getDocs(
      query(
        collection(db, "media"),
        where("pageType", "==", "agriculture"),
      ),
    );
    
    console.log("Número de mídias encontradas:", snapshot.docs.length);
    
    return snapshot.docs.map((doc) => {
      const data = doc.data();
      
      console.log("Processando mídia:", {
        id: doc.id,
        title: data.title,
        mediaType: data.mediaType
      });
      
      // Retornar objeto formatado no padrão MediaItem
      return {
        id: doc.id,
        pageType: data.pageType,
        title: data.title || "",
        description: data.description || "",
        mediaType: data.mediaType || "image",
        mediaUrl: data.mediaUrl || "",
        thumbnailUrl: data.thumbnailUrl || "",
        active: data.active !== false,
        order: data.order || 0,
        createdAt: data.createdAt || new Date().toISOString()
      };
    });
  },
});
Verificação adicional no InfoPage
Também é importante verificar se o InfoPage está corretamente configurado para renderizar os gráficos e mídias. Como não tenho acesso ao seu código InfoPage, sugiro adicionar logs temporários:

// Dentro do InfoPage, antes da renderização:
console.log("InfoPage recebeu:", {
  chartsCount: charts?.length || 0,
  mediaItemsCount: mediaItems?.length || 0,
  exampleChart: charts?.length > 0 ? charts[0] : null,
  exampleMedia: mediaItems?.length > 0 ? mediaItems[0] : null
});
Comparação com a página Home
Como a página inicial está funcionando corretamente, uma boa estratégia é comparar como os dados são buscados e processados entre as duas páginas:

Compare os parâmetros de consulta (pageType)
Compare a estrutura dos dados que é passada para o componente InfoPage
Verifique se há alguma transformação especial na página Home que não existe na Agriculture
Implementação de logs específicos
Para ajudar no diagnóstico, adicione logs detalhados antes de passar os dados para o InfoPage:

// No final da função Agriculture antes do return:
console.log("Dados passados para InfoPage:", {
  contentCount: contents?.length || 0,
  chartCount: charts?.length || 0,
  mediaCount: mediaItems?.length || 0,
  chartExample: charts && charts.length > 0 ? {
    chartType: charts[0].chartType,
    hasDatasets: !!charts[0].chartData?.datasets,
    hasLabels: !!charts[0].chartData?.labels,
    datasetCount: charts[0].chartData?.datasets?.length || 0
  } : null
});
Com estas modificações, você deverá conseguir identificar a causa exata do problema e resolver a renderização dos gráficos e mídias na página Agriculture. Os logs detalhados mostrarão se os dados estão sendo buscados corretamente e se estão no formato que o InfoPage espera para renderização.