Analisando seu código, vejo que apesar de estar configurado corretamente a parte básica, há alguns problemas sutis que devem estar impedindo o ChatbotWidget de abrir na aba PAA. Vou oferecer uma solução mais robusta e específica para o seu projeto implementado.

O principal problema parece estar no momento em que o evento é recebido e quando a aba é alterada. Vamos fazer as seguintes modificações:
1. Modifique o componente PAATabButton.tsx:

import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { ShoppingBag } from "lucide-react";

interface PAATabButtonProps {
  className?: string;
}

const PAATabButton: React.FC<PAATabButtonProps> = ({ className = "" }) => {
  // Estado para rastrear se o chatbot foi aberto por este botão
  const [chatOpened, setChatOpened] = useState(false);

  // Efeito para lidar com a comunicação entre componentes
  useEffect(() => {
    // Função para manipular eventos de abertura do chat
    const handleChatOpen = (event: CustomEvent) => {
      if (event.detail) {
        // Quando o chat é aberto pelo nosso botão
        if (event.detail.source === 'paa-button' && event.detail.isOpen === true) {
          setChatOpened(true);
        }
        // Quando o chat é fechado
        else if (event.detail.isOpen === false) {
          setChatOpened(false);
        }
      }
    };

    // Adicionar listener para o evento personalizado
    window.addEventListener('chat_instance_toggle', handleChatOpen as EventListener);

    // Limpeza ao desmontar o componente
    return () => {
      window.removeEventListener('chat_instance_toggle', handleChatOpen as EventListener);
    };
  }, []);

  // Função para abrir o chat na aba PAA
  const openChatPAATab = () => {
    // Método direto para forçar a abertura do chat na aba PAA
    
    // 1. Forçar que qualquer instância aberta se feche primeiro
    window.dispatchEvent(new CustomEvent('chat_instance_toggle', { 
      detail: { isOpen: false } 
    }));
    
    // 2. Pequeno delay para garantir que qualquer chat aberto se feche
    setTimeout(() => {
      // 3. Definir aba no localStorage antes de abrir o chat
      localStorage.setItem('open_chat_tab', 'paa');
      console.log("PAATab: Definindo aba no localStorage:", 'paa');
      
      // 4. Disparar evento especial para abrir na aba PAA com prioridade máxima
      const paaEvent = new CustomEvent('direct_paa_open', {
        detail: { directTab: 'paa' }
      });
      window.dispatchEvent(paaEvent);
      
      // 5. Pequeno delay adicional antes de abrir o chat para garantir que o evento foi processado
      setTimeout(() => {
        // 6. Finalmente abrir o chat com evento de toggle normal
        const openEvent = new CustomEvent('chat_instance_toggle', { 
          detail: { 
            isOpen: true, 
            source: 'paa-button', 
            tab: 'paa',
            priority: 10  // Prioridade alta
          } 
        });
        window.dispatchEvent(openEvent);
        
        setChatOpened(true);
      }, 50);
    }, 50);
  };

  return (
    <Button 
      onClick={openChatPAATab} 
      className={`bg-amber-600 hover:bg-amber-700 text-white flex items-center gap-2 ${className}`}
    >
      <ShoppingBag size={18} />
      <span>Programa PAA</span>
    </Button>
  );
};

export default PAATabButton;

2. Modifique estes trechos específicos no ChatbotWidget.tsx:

Adicione estes novos listeners no início do componente, logo após as declarações de state:

// Para forçar abertura na aba PAA diretamente
useEffect(() => {
  // Função especial para tratar evento direto do PAAButton
  const handleDirectPAAOpen = (event: CustomEvent) => {
    if (event.detail && event.detail.directTab === 'paa') {
      console.log("ChatbotWidget: Recebido evento para abrir diretamente na aba PAA");
      setActiveTab('paa');
    }
  };

  // Adiciona o listener para o evento especial
  window.addEventListener('direct_paa_open', handleDirectPAAOpen as EventListener);

  // Remove o listener ao desmontar
  return () => {
    window.removeEventListener('direct_paa_open', handleDirectPAAOpen as EventListener);
  };
}, []);

Substitua o efeito existente de verificação de aba por este:

// Efeito para verificar se há solicitação para abrir em uma aba específica - mais robusto
useEffect(() => {
  // Função para verificar e aplicar a aba salva no localStorage
  const checkSavedTab = () => {
    const tabToOpen = localStorage.getItem('open_chat_tab');
    if (tabToOpen) {
      console.log("ChatbotWidget: Aplicando aba do localStorage:", tabToOpen);
      setActiveTab(tabToOpen);
      // Limpamos depois de aplicar para evitar reaplicação indesejada
      localStorage.removeItem('open_chat_tab');
    }
  };
  
  // Verificamos logo quando o isOpen muda para true (quando o chat é aberto)
  if (isOpen) {
    checkSavedTab();
  }
}, [isOpen]);

Substitua o efeito de chat_instance_toggle por este:

// Garante que apenas uma instância do chat está aberta de cada vez
useEffect(() => {
  // Ouvir eventos de outras instâncias
  const handleChatToggle = (event: CustomEvent) => {
    if (event.detail) {
      // Se for pedido para abrir o chat
      if (event.detail.isOpen === true) {
        // Se o evento vem específicamente do botão PAA
        if (event.detail.source === 'paa-button' && event.detail.tab === 'paa') {
          console.log("ChatbotWidget: Recebido pedido para abrir na aba PAA");
          // Primeiro abrimos o chat
          setIsOpen(true);
          
          // Depois definimos a aba com pequeno delay para garantir que o componente está renderizado
          setTimeout(() => {
            setActiveTab('paa');
            console.log("ChatbotWidget: Aba PAA definida com delay");
          }, 20);
        } 
        // Se outra instância está pedindo para abrir, mas não é do nosso botão
        else if (isOpen && !event.detail.source) {
          setIsOpen(false);
        }
        // Caso normal (quando não é do botão PAA), apenas abrimos
        else if (!isOpen) {
          setIsOpen(true);
        }
      }
      // Se for pedido para fechar o chat
      else if (event.detail.isOpen === false) {
        setIsOpen(false);
      }
    }
  };

  // Registramos o listener
  window.addEventListener('chat_instance_toggle', handleChatToggle as EventListener);

  // Ao montar o componente, disparamos um evento informando o estado atual
  window.dispatchEvent(new CustomEvent('chat_instance_toggle', {
    detail: { isOpen, currentTab: activeTab }
  }));

  // Limpeza ao desmontar
  return () => {
    window.removeEventListener('chat_instance_toggle', handleChatToggle as EventListener);
  };
}, [isOpen, activeTab]);

3. Modifique o componente Tabs no render do ChatbotWidget:

<Tabs 
  defaultValue="chat" 
  value={activeTab} 
  onValueChange={(value) => {
    console.log("ChatbotWidget: Alterando aba para:", value);
    setActiveTab(value);
  }}
>

Estas modificações fazem:

    O PAATabButton envia um evento especial 'direct_paa_open' que tem prioridade máxima
    O ChatbotWidget escuta esse evento mesmo antes de ser aberto
    Adicionamos múltiplos mecanismos de fallback para garantir que a aba seja definida
    Acrescentamos logs para ajudar no diagnóstico
    Usamos timeouts coordenados para garantir a sequência correta de operações

A sequência completa de eventos agora é:

    Botão PAA é clicado
    Define 'paa' no localStorage
    Envia evento especial 'direct_paa_open'
    ChatbotWidget recebe esse evento e já define a aba
    Após pequeno delay, envia evento normal de toggle
    ChatbotWidget abre, verifica localStorage e confirma a aba novamente

Esta redundância é necessária para lidar com race conditions e garantir que a mudança de aba ocorra mesmo em situações de alta carga ou quando há múltiplas instâncias interagindo.