Reorganização de Informações para Integração no Projeto Existente
Com base na estrutura do seu projeto atual, vou reorganizar as informações sobre o projeto de páginas governamentais para garantir compatibilidade e evitar referências a arquivos inexistentes.

Estrutura Recomendada para Integração
1. Esquema de Dados (shared/)
Arquivo: shared/schema2.ts (usando o arquivo existente ou criando um novo)

Definir os novos modelos: contents, charts, mediaItems, statistics
Garantir compatibilidade com o esquema existente
// Exemplo de adição ao schema2.ts existente
export const contents = /* ... definição da tabela ... */;
export const charts = /* ... definição da tabela ... */;
// ... outros modelos
2. Backend (server/)
Modificar: server/routes.ts

Adicionar novas rotas junto às existentes
Agrupar por função (conteúdos, gráficos, etc.)
// Exemplo de adição às rotas existentes
// API Routes for contents
app.get("/api/contents", async (req, res) => { /* ... */ });
app.get("/api/contents/:id", async (req, res) => { /* ... */ });
// ... outras rotas
Modificar: server/storage.ts

Estender a interface de armazenamento existente
Integrar com seu sistema de armazenamento (Firebase/Cloudflare)
3. Frontend (client/src/)
Páginas:
Adicionar em client/src/pages/:

Home.tsx (ou modificar a página inicial existente)
AgricultureInfo.tsx (em vez de Agriculture.tsx)
FishingInfo.tsx (em vez de Fishing.tsx)
PAAInfo.tsx (em vez de PAA.tsx)
Dashboard.tsx (ou integrar à página de administração existente)
Componentes:
Organizar os novos componentes seguindo a estrutura existente:

Componentes de UI Base - client/src/components/ui/:

PageHeader.tsx
Chart.tsx (para renderização de gráficos)
Outros componentes UI reutilizáveis
Componentes de Layout - client/src/components/layout/:

Integrar com Navbar.tsx e Footer.tsx existentes
Componentes por Página:

client/src/components/home/:

HeroSection.tsx
StatisticsSection.tsx
DataVisualizationSection.tsx
AreasSection.tsx
MediaGallerySection.tsx
client/src/components/dashboard/:

ContentList.tsx
ContentForm.tsx
ChartList.tsx
ChartForm.tsx
MediaList.tsx
MediaUploader.tsx
StatisticList.tsx
StatisticForm.tsx
client/src/components/common/:

InfoPage.tsx (componente reutilizado por páginas informativas)
ChartComponent.tsx
Abordagem para Evitar Referências a Arquivos Inexistentes
Criação Progressiva de Arquivos:

Crie primeiro os componentes base e de utilidade
Depois crie os componentes de página específicos
Por fim, implemente as páginas principais
Teste cada componente após sua criação
Verificação de Dependências:

Antes de implementar um componente, verifique se todas as suas dependências já existem
Use importações relativas corretas (ex: @/components/ui/button vs ../ui/button)
Adaptação de Nomes:

Renomeie componentes conforme necessário para evitar conflitos
Ex: InfoPage → SectorInfoPage se já existir outro InfoPage
Estratégia de Importação Centralizada:

Crie um arquivo de índice em cada diretório de componentes:
// client/src/components/dashboard/index.ts
export { default as ContentList } from './ContentList';
export { default as ContentForm } from './ContentForm';
// etc.
Isso permite importar de @/components/dashboard e facilita migrações
Validação de Caminhos:

Sempre verifique se o caminho completo existe antes de importar
Mantenha consistência nas convenções de nomenclatura
Exemplo de Implementação Prática
Etapa 1: Adaptar o Schema
// shared/schema2.ts (adicionando aos schemas existentes)
export const contents = /* ... */;
export const insertContentSchema = /* ... */;
export type Content = typeof contents.$inferSelect;
export type InsertContent = z.infer<typeof insertContentSchema>;
// ... outros modelos
Etapa 2: Implementar Componentes UI Básicos
// client/src/components/ui/Chart.tsx
import { ChartData } from "@/shared/schema2";
interface ChartProps {
  data: ChartData;
  type: string;
}
export function Chart({ data, type }: ChartProps) {
  // Implementação
}
Etapa 3: Implementar Componentes de Página
// client/src/components/common/InfoPage.tsx
import { Content, Chart, MediaItem } from "@/shared/schema2";
interface InfoPageProps {
  title: string;
  subtitle: string;
  contents: Content[];
  charts: Chart[];
  mediaItems: MediaItem[];
  // ...
}
export function InfoPage(props: InfoPageProps) {
  // Implementação
}
Etapa 4: Implementar Páginas
// client/src/pages/AgricultureInfo.tsx
import { useQuery } from "@tanstack/react-query";
import { InfoPage } from "@/components/common/InfoPage";
export default function AgricultureInfo() {
  const { data: contents } = useQuery({
    queryKey: ['/api/contents', 'agriculture'],
    // ...
  });
  
  // Implementação
}
Seguindo esta abordagem estruturada, você pode integrar progressivamente os componentes e páginas do projeto governamental ao seu projeto existente, mantendo a organização e evitando referências a arquivos inexistentes.