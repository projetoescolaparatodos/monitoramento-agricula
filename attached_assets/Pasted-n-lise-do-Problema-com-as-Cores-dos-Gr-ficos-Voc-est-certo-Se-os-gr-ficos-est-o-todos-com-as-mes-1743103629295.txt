nálise do Problema com as Cores dos Gráficos
Você está certo! Se os gráficos estão todos com as mesmas cores, é muito provável que as cores escolhidas no dashboard do gestor não estejam sendo corretamente salvas no banco de dados ou processadas pela página Agriculture.

Verificação do Fluxo de Dados
Vamos verificar todo o fluxo de dados para as cores dos gráficos:

1. Formulário de Criação de Gráficos no Dashboard (ChartForm)
Primeiro, vamos verificar se o formulário de gráficos está capturando as cores selecionadas:

// No componente de formulário de gráficos (provavelmente em components/dashboard/ChartForm.tsx)
// O problema pode estar aqui, se as cores não estiverem sendo incluídas nos dados enviados ao Firebase
// Verifique se há campos para selecionar cores para:
// - backgroundColor (cor de fundo)
// - borderColor (cor de borda)
// E se esses campos estão sendo incluídos no objeto final enviado ao Firebase
const onSubmit = async (data: ChartFormData) => {
  // Verifique se está incluindo as cores no objeto chartData
  const chartDataToSave = {
    labels: data.chartData.labels,
    datasets: data.chartData.datasets.map(dataset => ({
      label: dataset.label,
      data: dataset.data,
      backgroundColor: dataset.backgroundColor, // ⬅️ Está incluindo isso?
      borderColor: dataset.borderColor, // ⬅️ Está incluindo isso?
      borderWidth: dataset.borderWidth
    }))
  };
  
  // Resto do código...
};
2. Processamento de Dados na Página Agriculture
Verifique se a página Agriculture está preservando as cores quando processa os dados do Firebase:

// Em Agriculture.tsx durante o processamento dos dados dos gráficos
const { data: charts, isLoading: isLoadingCharts } = useQuery<ChartItem[]>({
  queryKey: ["charts", "agriculture"],
  queryFn: async () => {
    const snapshot = await getDocs(
      query(collection(db, "charts"), where("pageType", "==", "agriculture"))
    );
    
    return snapshot.docs.map((doc) => {
      const data = doc.data();
      
      // Verifique se está preservando as cores dos datasets
      const datasets = data.chartData?.datasets?.map(dataset => ({
        ...dataset,
        // Está mantendo backgroundColor e borderColor?
        backgroundColor: dataset.backgroundColor || "#defaultColor", // Cai no padrão se não existir
        borderColor: dataset.borderColor || "#defaultBorder"
      })) || [];
      
      return {
        id: doc.id,
        pageType: data.pageType,
        title: data.title || "",
        description: data.description || "",
        chartType: data.chartType || "bar",
        chartData: {
          labels: data.chartData?.labels || [],
          datasets: datasets
        },
        // Resto do objeto...
      };
    });
  },
});
3. Componente ChartComponent
Verifique se o componente ChartComponent está usando as cores fornecidas pelos dados e apenas aplicando cores padrão quando não existem:

// Em components/common/ChartComponent.tsx
const ChartComponent = ({ chartType, chartData }) => {
  // Processamento dos dados para garantir cores
  const processedData = {
    labels: chartData.labels,
    datasets: chartData.datasets.map((dataset, index) => {
      // Use as cores fornecidas, se existirem
      return {
        ...dataset,
        // Aplique cores padrão APENAS se não houver cores definidas
        backgroundColor: dataset.backgroundColor || defaultColors[index % defaultColors.length],
        borderColor: dataset.borderColor || defaultBorders[index % defaultBorders.length],
        borderWidth: dataset.borderWidth || 1
      };
    })
  };
  
  // Resto do código...
};
Soluções Recomendadas
1. Verificar e Ajustar o Formulário de Gráficos
// Em components/dashboard/ChartForm.tsx
// Adicione campos para selecionar cores:
<div className="space-y-4">
  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div>
      <Label htmlFor="backgroundColor">Cor de Fundo</Label>
      <Input
        id="backgroundColor"
        type="color"
        {...register(`chartData.datasets.0.backgroundColor`)}
      />
    </div>
    <div>
      <Label htmlFor="borderColor">Cor da Borda</Label>
      <Input
        id="borderColor"
        type="color"
        {...register(`chartData.datasets.0.borderColor`)}
      />
    </div>
  </div>
</div>
// No onSubmit, garanta que as cores estão sendo incluídas:
const onSubmit = async (data: ChartFormData) => {
  console.log("Dados do formulário:", data); // Log para debug
  
  try {
    const chartToSave = {
      ...data,
      chartData: {
        labels: data.chartData.labels,
        datasets: data.chartData.datasets.map(dataset => ({
          label: dataset.label,
          data: dataset.data,
          backgroundColor: dataset.backgroundColor, // Garanta que está incluindo
          borderColor: dataset.borderColor, // Garanta que está incluindo
          borderWidth: dataset.borderWidth || 1
        }))
      }
    };
    
    console.log("Dados para salvar no Firebase:", chartToSave); // Log para debug
    
    // Resto do código de salvamento...
  } catch (error) {
    console.error("Erro ao salvar gráfico:", error);
  }
};
2. Melhoria no Componente ChartComponent para Cores Dinâmicas
// Em components/common/ChartComponent.tsx
// Paleta de cores institucional
const defaultColors = [
  'rgba(75, 192, 85, 0.8)',    // Verde vibrante
  'rgba(140, 176, 54, 0.8)',   // Verde oliva
  'rgba(202, 155, 68, 0.8)',   // Castanho
  'rgba(159, 112, 74, 0.8)',   // Marrom
  'rgba(108, 157, 198, 0.8)',  // Azul claro
  'rgba(225, 190, 106, 0.8)',  // Amarelo trigo
  'rgba(161, 215, 173, 0.8)',  // Verde claro
  'rgba(103, 126, 80, 0.8)',   // Verde escuro
  'rgba(199, 126, 59, 0.8)',   // Laranja terroso
  'rgba(71, 140, 111, 0.8)'    // Verde esmeralda
];
const defaultBorders = [
  'rgba(75, 192, 85, 1)',
  'rgba(140, 176, 54, 1)',
  'rgba(202, 155, 68, 1)',
  'rgba(159, 112, 74, 1)',
  'rgba(108, 157, 198, 1)',
  'rgba(225, 190, 106, 1)',
  'rgba(161, 215, 173, 1)',
  'rgba(103, 126, 80, 1)',
  'rgba(199, 126, 59, 1)',
  'rgba(71, 140, 111, 1)'
];
const ChartComponent = ({ chartType, chartData }) => {
  // Adicione logs para debug
  console.log("Dados recebidos pelo ChartComponent:", {
    chartType,
    labels: chartData.labels,
    datasets: chartData.datasets.map(ds => ({
      label: ds.label,
      hasBackgroundColor: !!ds.backgroundColor,
      hasBorderColor: !!ds.borderColor
    }))
  });
  
  // Processamento dos dados para garantir cores corretas
  const processedData = {
    labels: chartData.labels,
    datasets: chartData.datasets.map((dataset, index) => {
      // Para gráficos de pizza/rosca, cores para cada fatia
      if (chartType.toLowerCase() === 'pie' || chartType.toLowerCase() === 'doughnut') {
        return {
          ...dataset,
          backgroundColor: dataset.backgroundColor || 
            chartData.labels.map((_, i) => defaultColors[i % defaultColors.length]),
          borderColor: dataset.borderColor || 
            chartData.labels.map((_, i) => defaultBorders[i % defaultBorders.length]),
          borderWidth: dataset.borderWidth || 1
        };
      }
      
      // Para outros tipos de gráficos
      return {
        ...dataset,
        backgroundColor: dataset.backgroundColor || defaultColors[index % defaultColors.length],
        borderColor: dataset.borderColor || defaultBorders[index % defaultBorders.length],
        borderWidth: dataset.borderWidth || 2
      };
    })
  };
  
  console.log("Dados processados para o gráfico:", processedData);
  
  // Resto do código...
};