Solução:

O truque está em usar um polígono complexo que representa o "mundo inteiro menos o município". No Google Maps API, isso pode ser feito criando um polígono com dois caminhos:

    O primeiro caminho é o retângulo que cobre todo o mundo

    O segundo caminho é o contorno do município (em ordem inversa de pontos)

Aqui está a modificação necessária:
typescript
Copy

// Substitua a parte do código que define a máscara por:

{/* Máscara escura aplicada fora do município (invertida) */}
<Polygon
  paths={[
    worldBounds, // Primeiro caminho: mundo inteiro
    [...municipioBoundary].reverse() // Segundo caminho: município em ordem inversa
  ]}
  options={{
    ...maskStyle,
    fillOpacity: 0.5, // 50% de opacidade
  }}
/>

{/* Contorno do município (opcional) */}
{showBoundary && (
  <Polygon
    paths={municipioBoundary}
    options={boundaryStyle}
  />
)}

Explicação detalhada:

    Lógica da inversão:

        Ao definir dois caminhos no polígono (o mundo e o município em ordem inversa), o Google Maps entende que você quer "cortar" o segundo caminho do primeiro

        Isso cria efetivamente uma máscara que cobre tudo, exceto a área do município

    Ordem dos pontos:

        O worldBounds deve estar no sentido horário

        O municipioBoundary deve estar no sentido anti-horário (por isso usamos [...municipioBoundary].reverse())

    Estilo:

        Mantemos o fillOpacity em 0.5 (50%) como solicitado

        O strokeWeight permanece 0 para não mostrar bordas na máscara

Código completo da solução:
typescript
Copy

// No seu componente, substitua a parte do Google Maps por:

<GoogleMap
  mapContainerStyle={mapContainerStyle}
  center={center}
  zoom={12}
  onLoad={() => setMapLoaded(true)}
  options={{
    minZoom: 10,
    maxZoom: 16,
    restriction: {
      latLngBounds: bounds,
      strictBounds: true,
    },
    styles: [
      {
        featureType: "administrative",
        elementType: "labels",
        stylers: [{ visibility: "on" }]
      },
      {
        featureType: "poi",
        stylers: [{ visibility: "on" }]
      }
    ]
  }}
>
  {tratoresFiltrados.map((trator) => (
    <MarkerF
      key={trator.id}
      position={{ lat: trator.latitude, lng: trator.longitude }}
      onClick={() => setSelectedMarker(trator)}
      icon={{
        url: trator.concluido ? "/trator-icon.png" : "/giftrator.gif",
        scaledSize: new window.google.maps.Size(
          trator.concluido ? 40 : 100,
          trator.concluido ? 40 : 100
        ),
        anchor: new window.google.maps.Point(
          trator.concluido ? 20 : 50,
          trator.concluido ? 20 : 50
        ),
      }}
    />
  ))}
  {selectedMarker && renderInfoWindow(selectedMarker)}
  
  {/* Máscara escura aplicada FORA do município (solução invertida) */}
  <Polygon
    paths={[
      worldBounds, // Primeiro caminho: mundo inteiro
      [...municipioBoundary].reverse() // Segundo caminho: município em ordem inversa
    ]}
    options={{
      fillColor: '#000000',
      fillOpacity: 0.5, // 50% de opacidade
      strokeWeight: 0,
      clickable: false
    }}
  />
  
  {/* Contorno do município (opcional) */}
  {showBoundary && (
    <Polygon
      paths={municipioBoundary}
      options={boundaryStyle}
    />
  )}
  
  {/* Botão de controle para o limite */}
  <div className="absolute top-20 right-4 z-50">
    <button
      onClick={() => setShowBoundary(!showBoundary)}
      className={styles["boundary-toggle"]}
    >
      {showBoundary ? "Ocultar Limite Municipal" : "Mostrar Limite Municipal"}
    </button>
  </div>
</GoogleMap>