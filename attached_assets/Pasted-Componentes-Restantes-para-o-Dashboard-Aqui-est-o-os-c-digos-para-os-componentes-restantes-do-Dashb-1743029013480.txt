Componentes Restantes para o Dashboard
Aqui estão os códigos para os componentes restantes do Dashboard:

1. MediaList.tsx
// client/src/components/dashboard/MediaList.tsx
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { MediaItem } from "../../types"; // Ajuste o caminho
import { Card } from "../ui/card";
import { Button } from "../ui/button";
import { Skeleton } from "../ui/skeleton";
import { Badge } from "../ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "../ui/dialog";
import { apiRequest, queryClient } from "../../lib/queryClient"; // Ajuste o caminho
import { useToast } from "../../hooks/use-toast"; // Ajuste o caminho
interface MediaListProps {
  onEdit: (id: number) => void;
}
export const MediaList = ({ onEdit }: MediaListProps) => {
  const { data: mediaItems, isLoading } = useQuery<MediaItem[]>({
    queryKey: ['/api/media-items'],
  });
  
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [mediaToDelete, setMediaToDelete] = useState<number | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const { toast } = useToast();
  const handleDelete = async () => {
    if (!mediaToDelete) return;
    
    try {
      setIsDeleting(true);
      await apiRequest("DELETE", `/api/media-items/${mediaToDelete}`, undefined);
      queryClient.invalidateQueries({ queryKey: ['/api/media-items'] });
      toast({
        title: "Mídia excluída",
        description: "O item de mídia foi excluído com sucesso.",
      });
      setIsDeleteDialogOpen(false);
    } catch (error) {
      toast({
        title: "Erro ao excluir",
        description: "Ocorreu um erro ao excluir o item de mídia.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };
  const openDeleteDialog = (id: number) => {
    setMediaToDelete(id);
    setIsDeleteDialogOpen(true);
  };
  const getPageTypeName = (pageType: string) => {
    switch (pageType) {
      case 'home': return 'Página Inicial';
      case 'agriculture': return 'Agricultura';
      case 'fishing': return 'Pesca';
      case 'paa': return 'PAA';
      default: return pageType;
    }
  };
  return (
    <div className="space-y-6">
      {isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[1, 2, 3, 4, 5, 6].map(i => (
            <Skeleton key={i} className="h-56 w-full rounded-md" />
          ))}
        </div>
      ) : !mediaItems || mediaItems.length === 0 ? (
        <Card className="p-6 text-center">
          <p className="text-neutral-dark mb-4">Nenhum item de mídia cadastrado.</p>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {mediaItems.map((media) => (
            <Card key={media.id} className="overflow-hidden">
              <div className="relative h-40">
                {media.mediaType === "image" ? (
                  <img
                    src={media.mediaUrl}
                    alt={media.title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center bg-gray-100">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-primary-dark" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
                <div className="absolute top-2 right-2">
                  <Badge variant={media.active ? "default" : "outline"}>
                    {media.active ? "Ativo" : "Inativo"}
                  </Badge>
                </div>
              </div>
              <div className="p-4">
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <h3 className="font-semibold text-secondary truncate">{media.title}</h3>
                    <p className="text-xs text-neutral">{getPageTypeName(media.pageType)}</p>
                  </div>
                  <span className="text-xs bg-muted px-2 py-1 rounded">Ordem: {media.order}</span>
                </div>
                {media.description && (
                  <p className="text-sm text-neutral-dark mt-2 line-clamp-2">{media.description}</p>
                )}
                <div className="flex space-x-2 mt-4">
                  <Button
                    size="sm"
                    variant="outline"
                    className="flex-1"
                    onClick={() => onEdit(media.id)}
                  >
                    Editar
                  </Button>
                  <Button
                    size="sm"
                    variant="destructive"
                    className="flex-1"
                    onClick={() => openDeleteDialog(media.id)}
                  >
                    Excluir
                  </Button>
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmar exclusão</DialogTitle>
            <DialogDescription>
              Tem certeza de que deseja excluir este item de mídia? Esta ação não pode ser desfeita.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsDeleteDialogOpen(false)}
              disabled={isDeleting}
            >
              Cancelar
            </Button>
            <Button
              variant="destructive"
              onClick={handleDelete}
              disabled={isDeleting}
            >
              {isDeleting ? "Excluindo..." : "Excluir"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};
export default MediaList;
2. MediaUploader.tsx
// client/src/components/dashboard/MediaUploader.tsx
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { MediaFormData, PageType } from "../../types"; // Ajuste o caminho
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "../ui/form";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { Textarea } from "../ui/textarea";
import { Switch } from "../ui/switch";
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card";
import { apiRequest, queryClient } from "../../lib/queryClient"; // Ajuste o caminho
import { useToast } from "../../hooks/use-toast"; // Ajuste o caminho
import { useQuery } from "@tanstack/react-query";
// Form validation schema
const formSchema = z.object({
  pageType: z.string(),
  title: z.string().min(2, "Título deve ter pelo menos 2 caracteres"),
  description: z.string().optional(),
  mediaType: z.string(),
  mediaUrl: z.string().url("URL inválida"),
  thumbnailUrl: z.string().url("URL inválida").optional().or(z.literal('')),
  active: z.boolean().default(true),
  order: z.number().int().min(0)
});
interface MediaUploaderProps {
  mediaData?: MediaFormData;
  isEdit?: boolean;
  onSuccess?: () => void;
}
export const MediaUploader = ({ mediaData, isEdit = false, onSuccess }: MediaUploaderProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  // Fetch media data if in edit mode
  const { data: fetchedMedia, isLoading } = useQuery({
    queryKey: ['/api/media-items', mediaData?.id],
    queryFn: async () => {
      if (isEdit && mediaData?.id) {
        const res = await fetch(`/api/media-items/${mediaData.id}`);
        if (!res.ok) throw new Error('Failed to fetch media');
        return res.json();
      }
      return null;
    },
    enabled: isEdit && !!mediaData?.id,
  });
  const defaultValues: MediaFormData = {
    pageType: "home" as PageType,
    title: "",
    description: "",
    mediaType: "image",
    mediaUrl: "",
    thumbnailUrl: "",
    active: true,
    order: 0
  };
  const form = useForm<MediaFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: fetchedMedia || mediaData || defaultValues,
  });
  // Update form when fetched data is available
  if (isEdit && fetchedMedia && !form.formState.isDirty) {
    form.reset(fetchedMedia);
  }
  const onSubmit = async (data: MediaFormData) => {
    try {
      setIsSubmitting(true);
      if (isEdit && mediaData?.id) {
        await apiRequest("PUT", `/api/media-items/${mediaData.id}`, data);
        toast({
          title: "Mídia atualizada",
          description: "O item de mídia foi atualizado com sucesso.",
        });
      } else {
        await apiRequest("POST", "/api/media-items", data);
        form.reset(defaultValues);
        toast({
          title: "Mídia criada",
          description: "O item de mídia foi criado com sucesso.",
        });
      }
      // Invalidate queries to refresh data
      queryClient.invalidateQueries({ queryKey: ['/api/media-items'] });
      
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      toast({
        title: "Erro",
        description: "Ocorreu um erro ao salvar o item de mídia.",
        variant: "destructive",
      });
      console.error("Error submitting media:", error);
    } finally {
      setIsSubmitting(false);
    }
  };
  if (isEdit && isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Carregando Mídia...</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="h-10 bg-gray-100 animate-pulse rounded" />
            <div className="h-10 bg-gray-100 animate-pulse rounded" />
            <div className="h-10 bg-gray-100 animate-pulse rounded" />
          </div>
        </CardContent>
      </Card>
    );
  }
  const mediaUrl = form.watch('mediaUrl');
  const mediaType = form.watch('mediaType');
  return (
    <Card>
      <CardHeader>
        <CardTitle>{isEdit ? "Editar Mídia" : "Nova Mídia"}</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="pageType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Página</FormLabel>
                    <FormControl>
                      <select
                        {...field}
                        className="w-full p-2 border rounded-md"
                      >
                        <option value="home">Página Inicial</option>
                        <option value="agriculture">Agricultura</option>
                        <option value="fishing">Pesca</option>
                        <option value="paa">PAA</option>
                      </select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="mediaType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tipo de Mídia</FormLabel>
                    <FormControl>
                      <select
                        {...field}
                        className="w-full p-2 border rounded-md"
                      >
                        <option value="image">Imagem</option>
                        <option value="video">Vídeo</option>
                      </select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Título</FormLabel>
                  <FormControl>
                    <Input {...field} placeholder="Título da mídia" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descrição (opcional)</FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      placeholder="Descrição da mídia..."
                      value={field.value || ""}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="mediaUrl"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>URL da Mídia</FormLabel>
                  <FormControl>
                    <Input {...field} placeholder="https://example.com/image.jpg" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {mediaType === "video" && (
              <FormField
                control={form.control}
                name="thumbnailUrl"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>URL da Miniatura (opcional)</FormLabel>
                    <FormControl>
                      <Input 
                        {...field} 
                        placeholder="https://example.com/thumbnail.jpg"
                        value={field.value || ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
            {mediaUrl && (
              <div className="border p-4 rounded-md">
                <h3 className="font-medium mb-2">Pré-visualização</h3>
                {mediaType === "image" ? (
                  <div className="mt-2 rounded-md overflow-hidden max-h-60 flex justify-center">
                    <img 
                      src={mediaUrl} 
                      alt="Preview"
                      className="max-w-full h-auto object-contain" 
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = 'https://placehold.co/600x400?text=Imagem+não+encontrada';
                      }}
                    />
                  </div>
                ) : (
                  <div className="mt-2 bg-gray-100 rounded-md p-4 text-center">
                    <p>Vídeo: {mediaUrl}</p>
                  </div>
                )}
              </div>
            )}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ordem</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        min="0"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        value={field.value}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base">Ativo</FormLabel>
                      <p className="text-sm text-muted-foreground">
                        A mídia será exibida no site quando ativa
                      </p>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            </div>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Salvando..." : isEdit ? "Atualizar" : "Criar"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};
export default MediaUploader;
3. StatisticList.tsx
// client/src/components/dashboard/StatisticList.tsx
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { StatisticItem } from "../../types"; // Ajuste o caminho
import { Card, CardContent } from "../ui/card";
import { Button } from "../ui/button";
import { Skeleton } from "../ui/skeleton";
import { Badge } from "../ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "../ui/dialog";
import { apiRequest, queryClient } from "../../lib/queryClient"; // Ajuste o caminho
import { useToast } from "../../hooks/use-toast"; // Ajuste o caminho
interface StatisticListProps {
  onEdit: (id: number) => void;
}
export const StatisticList = ({ onEdit }: StatisticListProps) => {
  const { data: statistics, isLoading } = useQuery<StatisticItem[]>({
    queryKey: ['/api/statistics'],
  });
  
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [statisticToDelete, setStatisticToDelete] = useState<number | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const { toast } = useToast();
  const handleDelete = async () => {
    if (!statisticToDelete) return;
    
    try {
      setIsDeleting(true);
      await apiRequest("DELETE", `/api/statistics/${statisticToDelete}`, undefined);
      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });
      toast({
        title: "Estatística excluída",
        description: "A estatística foi excluída com sucesso.",
      });
      setIsDeleteDialogOpen(false);
    } catch (error) {
      toast({
        title: "Erro ao excluir",
        description: "Ocorreu um erro ao excluir a estatística.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };
  const openDeleteDialog = (id: number) => {
    setStatisticToDelete(id);
    setIsDeleteDialogOpen(true);
  };
  return (
    <Card>
      <CardContent className="p-0">
        {isLoading ? (
          <div className="p-6 space-y-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        ) : !statistics || statistics.length === 0 ? (
          <div className="p-6 text-center">
            <p className="text-neutral-dark mb-4">Nenhuma estatística cadastrada.</p>
          </div>
        ) : (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Rótulo</TableHead>
                <TableHead>Valor</TableHead>
                <TableHead>Tendência</TableHead>
                <TableHead>Ordem</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="w-[120px]">Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {statistics.map((statistic) => (
                <TableRow key={statistic.id}>
                  <TableCell className="font-medium">{statistic.label}</TableCell>
                  <TableCell>{statistic.value}</TableCell>
                  <TableCell>
                    {statistic.trend ? (
                      <span className={statistic.isPositive ? "text-success" : "text-error"}>
                        {statistic.trend}
                      </span>
                    ) : (
                      <span className="text-muted-foreground">--</span>
                    )}
                  </TableCell>
                  <TableCell>{statistic.order}</TableCell>
                  <TableCell>
                    <Badge variant={statistic.active ? "default" : "outline"}>
                      {statistic.active ? "Ativo" : "Inativo"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onEdit(statistic.id)}
                      >
                        Editar
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => openDeleteDialog(statistic.id)}
                      >
                        Excluir
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </CardContent>
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmar exclusão</DialogTitle>
            <DialogDescription>
              Tem certeza de que deseja excluir esta estatística? Esta ação não pode ser desfeita.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsDeleteDialogOpen(false)}
              disabled={isDeleting}
            >
              Cancelar
            </Button>
            <Button
              variant="destructive"
              onClick={handleDelete}
              disabled={isDeleting}
            >
              {isDeleting ? "Excluindo..." : "Excluir"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
};
export default StatisticList;
4. StatisticForm.tsx
// client/src/components/dashboard/StatisticForm.tsx
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest, queryClient } from "../../lib/queryClient"; // Ajuste o caminho
import { useToast } from "../../hooks/use-toast"; // Ajuste o caminho
import { StatisticFormData } from "../../types"; // Ajuste o caminho
import { Button } from "../ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "../ui/form";
import { Input } from "../ui/input";
import { Switch } from "../ui/switch";
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card";
import { useQuery } from "@tanstack/react-query";
// Form validation schema
const formSchema = z.object({
  label: z.string().min(2, "Rótulo deve ter pelo menos 2 caracteres"),
  value: z.string().min(1, "Valor é obrigatório"),
  trend: z.string().optional(),
  trendValue: z.string().optional(),
  isPositive: z.boolean().default(true),
  order: z.number().int().min(0),
  active: z.boolean().default(true),
});
interface StatisticFormProps {
  statisticData?: { id: number } & Partial<StatisticFormData>;
  isEdit?: boolean;
  onSuccess?: () => void;
}
export const StatisticForm = ({ statisticData, isEdit = false, onSuccess }: StatisticFormProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  // Fetch statistic data if in edit mode
  const { data: fetchedStatistic, isLoading } = useQuery({
    queryKey: ['/api/statistics', statisticData?.id],
    queryFn: async () => {
      if (isEdit && statisticData?.id) {
        const res = await fetch(`/api/statistics/${statisticData.id}`);
        if (!res.ok) throw new Error('Failed to fetch statistic');
        return res.json();
      }
      return null;
    },
    enabled: isEdit && !!statisticData?.id,
  });
  const defaultValues: StatisticFormData = {
    label: "",
    value: "",
    trend: "",
    trendValue: "",
    isPositive: true,
    order: 0,
    active: true,
  };
  const form = useForm<StatisticFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: fetchedStatistic || statisticData || defaultValues,
  });
  // Update form when fetched data is available
  if (isEdit && fetchedStatistic && !form.formState.isDirty) {
    form.reset(fetchedStatistic);
  }
  const onSubmit = async (data: StatisticFormData) => {
    try {
      setIsSubmitting(true);
      if (isEdit && statisticData?.id) {
        await apiRequest("PUT", `/api/statistics/${statisticData.id}`, data);
        toast({
          title: "Estatística atualizada",
          description: "A estatística foi atualizada com sucesso.",
        });
      } else {
        await apiRequest("POST", "/api/statistics", data);
        form.reset(defaultValues);
        toast({
          title: "Estatística criada",
          description: "A estatística foi criada com sucesso.",
        });
      }
      // Invalidate queries to refresh data
      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });
      
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      toast({
        title: "Erro",
        description: "Ocorreu um erro ao salvar a estatística.",
        variant: "destructive",
      });
      console.error("Error submitting statistic:", error);
    } finally {
      setIsSubmitting(false);
    }
  };
  if (isEdit && isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Carregando Estatística...</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="h-10 bg-gray-100 animate-pulse rounded" />
            <div className="h-10 bg-gray-100 animate-pulse rounded" />
            <div className="h-10 bg-gray-100 animate-pulse rounded" />
          </div>
        </CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader>
        <CardTitle>{isEdit ? "Editar Estatística" : "Nova Estatística"}</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="label"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Rótulo</FormLabel>
                  <FormControl>
                    <Input {...field} placeholder="Ex: Hectares Cultivados" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="value"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Valor</FormLabel>
                  <FormControl>
                    <Input {...field} placeholder="Ex: 42.8 milhões" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="trend"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tendência (opcional)</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Ex: 3.2% em relação ao ano anterior" value={field.value || ""} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="trendValue"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Valor da Tendência (opcional)</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Ex: 3.2" value={field.value || ""} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <FormField
              control={form.control}
              name="isPositive"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                  <div className="space-y-0.5">
                    <FormLabel className="text-base">Tendência Positiva</FormLabel>
                    <p className="text-sm text-muted-foreground">
                      A tendência deve ser exibida como positiva
                    </p>
                  </div>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </FormItem>
              )}
            />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ordem</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        min="0"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        value={field.value}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base">Ativo</FormLabel>
                      <p className="text-sm text-muted-foreground">
                        A estatística será exibida no site quando ativa
                      </p>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            </div>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Salvando..." : isEdit ? "Atualizar" : "Criar"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};
export default StatisticForm;
5. ContentList.tsx
// client/src/components/dashboard/ContentList.tsx
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { ContentItem } from "../../types"; // Ajuste o caminho
import { Card, CardContent } from "../ui/card";
import { Button } from "../ui/button";
import { Skeleton } from "../ui/skeleton";
import { Badge } from "../ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "../ui/dialog";
import { apiRequest, queryClient } from "../../lib/queryClient"; // Ajuste o caminho
import { useToast } from "../../hooks/use-toast"; // Ajuste o caminho
interface ContentListProps {
  onEdit: (id: number) => void;
}
export const ContentList = ({ onEdit }: ContentListProps) => {
  const { data: contents, isLoading } = useQuery<ContentItem[]>({
    queryKey: ['/api/contents'],
  });
  
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [contentToDelete, setContentToDelete] = useState<number | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const { toast } = useToast();
  const handleDelete = async () => {
    if (!contentToDelete) return;
    
    try {
      setIsDeleting(true);
      await apiRequest("DELETE", `/api/contents/${contentToDelete}`, undefined);
      queryClient.invalidateQueries({ queryKey: ['/api/contents'] });
      toast({
        title: "Conteúdo excluído",
        description: "O conteúdo foi excluído com sucesso.",
      });
      setIsDeleteDialogOpen(false);
    } catch (error) {
      toast({
        title: "Erro ao excluir",
        description: "Ocorreu um erro ao excluir o conteúdo.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };
  const openDeleteDialog = (id: number) => {
    setContentToDelete(id);
    setIsDeleteDialogOpen(true);
  };
  const getPageTypeName = (pageType: string) => {
    switch (pageType) {
      case 'home': return 'Página Inicial';
      case 'agriculture': return 'Agricultura';
      case 'fishing': return 'Pesca';
      case 'paa': return 'PAA';
      default: return pageType;
    }
  };
  const getSectionTypeName = (sectionType: string) => {
    switch (sectionType) {
      case 'hero': return 'Hero';
      case 'info': return 'Informativo';
      case 'about': return 'Sobre';
      case 'contact': return 'Contato';
      default: return sectionType;
    }
  };
  return (
    <Card>
      <CardContent className="p-0">
        {isLoading ? (
          <div className="p-6 space-y-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        ) : !contents || contents.length === 0 ? (
          <div className="p-6 text-center">
            <p className="text-neutral-dark mb-4">Nenhum conteúdo cadastrado.</p>
          </div>
        ) : (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Título</TableHead>
                <TableHead>Página</TableHead>
                <TableHead>Seção</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="w-[120px]">Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {contents.map((content) => (
                <TableRow key={content.id}>
                  <TableCell className="font-medium">{content.title}</TableCell>
                  <TableCell>{getPageTypeName(content.pageType)}</TableCell>
                  <TableCell>{getSectionTypeName(content.sectionType)}</TableCell>
                  <TableCell>
                    <Badge variant={content.active ? "default" : "outline"}>
                      {content.active ? "Ativo" : "Inativo"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onEdit(content.id)}
                      >
                        Editar
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => openDeleteDialog(content.id)}
                      >
                        Excluir
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </CardContent>
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmar exclusão</DialogTitle>
            <DialogDescription>
              Tem certeza de que deseja excluir este conteúdo? Esta ação não pode ser desfeita.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsDeleteDialogOpen(false)}
              disabled={isDeleting}
            >
              Cancelar
            </Button>
            <Button
              variant="destructive"
              onClick={handleDelete}
              disabled={isDeleting}
            >
              {isDeleting ? "Excluindo..." : "Excluir"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
};
export default ContentList;
6. Arquivo index.ts para facilitar importações
// client/src/components/dashboard/index.ts
export { default as ContentForm } from './ContentForm';
export { default as ContentList } from './ContentList';
export { default as ChartForm } from './ChartForm';
export { default as ChartList } from './ChartList';
export { default as MediaList } from './MediaList';
export { default as MediaUploader } from './MediaUploader';
export { default as StatisticList } from './StatisticList';
export { default as StatisticForm } from './StatisticForm';
7. Modificação recomendada no Dashboard.tsx
Para evitar erros de importação, recomendo modificar as importações no arquivo Dashboard.tsx para usar o arquivo index.ts:

// client/src/pages/Dashboard.tsx
// Substitua importações individuais por:
import {
  ContentForm,
  ContentList,
  ChartForm,
  ChartList,
  MediaList,
  MediaUploader,
  StatisticList,
  StatisticForm
} from "../components/dashboard"; // Use caminho relativo
Agora você tem todos os componentes necessários para o Dashboard. Certifique-se de adaptar os caminhos de importação conforme a estrutura do seu projeto. Uma vez criados esses arquivos, os problemas de importação devem ser resolvidos.