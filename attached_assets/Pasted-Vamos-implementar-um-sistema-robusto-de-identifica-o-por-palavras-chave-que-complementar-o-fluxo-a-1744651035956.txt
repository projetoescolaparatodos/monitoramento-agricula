Vamos implementar um sistema robusto de identificação por palavras-chave que complementará o fluxo atual. Aqui está a solução completa:

1. Primeiro, crie um arquivo para gerenciar palavras-chave:
typescript
Copy
// src/lib/keywordMatcher.ts
interface KeywordMap {
  [key: string]: {
    responses: string[];
    suggestions?: SuggestionButton[];
    action?: string;
    score: number;
  };
}

export const keywordMap: KeywordMap = {
  // Agricultura
  "assistência técnica": {
    responses: [
      "Oferecemos assistência técnica agrícola gratuita para produtores cadastrados.",
      "Para solicitar assistência técnica, você precisa preencher o formulário de cadastro."
    ],
    suggestions: [
      { text: "Solicitar Assistência", action: "abrirFormulario('agricultura')" }
    ],
    score: 2
  },
  "análise de solo": {
    responses: [
      "Realizamos análise de solo gratuita para produtores cadastrados.",
      "O kit para coleta de solo está disponível na nossa sede."
    ],
    action: "fluxoAgricultura",
    score: 2
  },
  
  // Pesca
  "licenciamento pesca": {
    responses: [
      "O licenciamento para atividade pesqueira requer documentos X, Y e Z.",
      "Podemos ajudar com todo processo de licenciamento ambiental para pesca."
    ],
    score: 3
  },
  
  // Genéricos
  "horário de atendimento": {
    responses: [
      "Atendemos de segunda a sexta, das 8h às 14h.",
      "Nosso horário de funcionamento é das 8h às 14h, exceto feriados."
    ],
    score: 1
  }
};

export function findBestKeywordMatch(userInput: string): string | null {
  const normalizedInput = userInput.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  let bestMatch: { keyword: string; score: number } | null = null;

  for (const keyword of Object.keys(keywordMap)) {
    const normalizedKeyword = keyword.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    
    if (normalizedInput.includes(normalizedKeyword)) {
      const currentScore = keywordMap[keyword].score;
      
      if (!bestMatch || currentScore > bestMatch.score) {
        bestMatch = { keyword, score: currentScore };
      }
    }
  }

  return bestMatch?.keyword || null;
}