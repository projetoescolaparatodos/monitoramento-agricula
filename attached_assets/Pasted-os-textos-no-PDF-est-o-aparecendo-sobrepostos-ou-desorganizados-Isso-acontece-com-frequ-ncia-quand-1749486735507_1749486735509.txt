os textos no PDF estão aparecendo sobrepostos ou desorganizados.

Isso acontece com frequência quando se usa a biblioteca jsPDF, especialmente quando:

🧩 Causas Comuns de Texto Sobreposto no PDF com jsPDF
Linhas de texto muito longas sem quebra automática (doc.text(...) não quebra por padrão).

Posicionamento vertical (y) manual sem atualização conforme o conteúdo anterior.

Falta de controle de altura do texto renderizado (por exemplo, doc.text com textos multiline sem usar splitTextToSize).

Uso de fontes grandes ou múltiplos estilos sem espaçamento adequado.

✅ Solução: Como Corrigir a Sobreposição de Texto
✅ 1. Use splitTextToSize para quebrar textos longos
ts
Copiar
Editar
const pageWidth = doc.internal.pageSize.getWidth();
const margin = 20;
const maxLineWidth = pageWidth - margin * 2;

const wrappedText = doc.splitTextToSize(longText, maxLineWidth);
doc.text(wrappedText, margin, yPos);
yPos += wrappedText.length * lineHeight; // Atualize y corretamente
✅ 2. Crie uma função auxiliar addSection com controle de altura
ts
Copiar
Editar
const addSection = (title: string, content: string) => {
  doc.setFontSize(12);
  doc.setFont(undefined, 'bold');
  doc.text(title, 20, yPos);
  yPos += lineHeight;

  doc.setFont(undefined, 'normal');
  const lines = doc.splitTextToSize(content || '---', maxLineWidth);
  doc.text(lines, 20, yPos);
  yPos += lines.length * lineHeight + 4; // Adiciona espaçamento
};
✅ 3. Verifique a fonte e tamanho
Mantenha a consistência nas fontes:

ts
Copiar
Editar
doc.setFont('Helvetica', 'normal');
doc.setFontSize(11);
💡 Exemplo Completo de Seção Corrigida
ts
Copiar
Editar
const generatePDF = (solicitacao) => {
  const doc = new jsPDF();
  let yPos = 20;
  const lineHeight = 7;
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxLineWidth = pageWidth - margin * 2;

  doc.setFontSize(16);
  doc.setFont(undefined, 'bold');
  doc.text('Relatório de Solicitação - Agricultura', margin, yPos);
  yPos += lineHeight * 2;

  const addSection = (title, content) => {
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text(title, margin, yPos);
    yPos += lineHeight;

    doc.setFont(undefined, 'normal');
    const lines = doc.splitTextToSize(content || '---', maxLineWidth);
    doc.text(lines, margin, yPos);
    yPos += lines.length * lineHeight + 4;
  };

  addSection("Nome do Solicitante", solicitacao?.nome || '');
  addSection("CPF", solicitacao?.cpf || '');
  addSection("Descrição do Serviço", solicitacao?.descricao || '');
  // Adicione outras seções...

  doc.save(`solicitacao-${solicitacao?.id}.pdf`);
};
🛠️ Recomendações Extras
Use splitTextToSize sempre que houver chance de overflow horizontal.

Sempre atualize o yPos após cada seção, proporcional ao número de linhas renderizadas.

Mantenha uma margem fixa (ex: 20 px) para evitar cortes laterais.

Se o conteúdo for muito grande, considere quebrar para nova página com:

ts
Copiar
Editar
if (yPos > doc.internal.pageSize.getHeight() - 30) {
  doc.addPage();
  yPos = 20;
}
Se quiser