Vamos adicionar o ChatbotWidget ao componente principal da aplicação para que ele apareça em todas as páginas:

// client/src/App.tsx
import React from 'react';
import { Route } from 'wouter';
import BackgroundVideo from './components/common/BackgroundVideo';
import ChatbotWidget from './components/common/ChatbotWidget'; // Importe o componente
import Home from './pages/Home';
import Agriculture from './pages/Agriculture';
import Fishing from './pages/Fishing';
import PAA from './pages/PAA';
import Dashboard from './pages/Dashboard';
import NotFound from './pages/not-found';

function Router() {
  return (
    <>
      {/* Vídeo de fundo que persiste entre navegações */}
      <BackgroundVideo videoPath="/videos/fundo-agricultura.mp4" opacity={0.3} />
      
      {/* Suas rotas existentes */}
      <div className="relative z-10">
        <Route path="/" component={Home} />
        <Route path="/agriculture" component={Agriculture} />
        <Route path="/fishing" component={Fishing} />
        <Route path="/paa" component={PAA} />
        <Route path="/dashboard" component={Dashboard} />
        <Route component={NotFound} />
      </div>
      
      {/* Widget do chatbot */}
      <ChatbotWidget />
    </>
  );
}

function App() {
  return (
    <div className="app">
      <Router />
    </div>
  );
}

export default App;

Passo 3: Adicionar um Endpoint Simples para Salvar Dados (Opcional)

Se você quiser armazenar as interações do chatbot, podemos adicionar um endpoint simples ao servidor:

// server/routes.ts (adicione ao arquivo existente)

// Endpoint para salvar mensagens do chatbot
app.post("/api/chatbot/mensagens", async (req: Request, res: Response) => {
  try {
    const { nome, cpf, endereco, propriedade, atividade, servico } = req.body;
    
    // Salvar no storage
    // Aqui você usaria seu sistema de armazenamento existente
    // Exemplo:
    // await storage.saveChatbotData({ nome, cpf, endereco, propriedade, atividade, servico });
    
    res.status(200).json({ success: true, message: 'Dados salvos com sucesso' });
  } catch (error) {
    console.error('Erro ao salvar dados do chatbot:', error);
    res.status(500).json({ success: false, error: 'Erro ao processar solicitação' });
  }
});

E modificar a função que envia os dados no componente do chatbot:

// Em ChatbotWidget.tsx, substitua o console.log por:

// Enviar dados para o servidor
const enviarDadosCadastro = async (dados: string[]) => {
  try {
    const [nome, cpfCnpj, endereco, propriedade, atividade, servico] = dados;
    
    await fetch('/api/chatbot/mensagens', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        nome,
        cpf: cpfCnpj,
        endereco,
        propriedade,
        atividade,
        servico,
        dataRegistro: new Date().toISOString()
      }),
    });
  } catch (error) {
    console.error('Erro ao enviar dados:', error);
  }
};

// E chamar esta função no lugar do console.log
enviarDadosCadastro(novasRespostas);