Problema com Formato de Coordenadas e Cadastro no Mapa
Parece que h√° dois problemas distintos no sistema:

1. Problema de Formata√ß√£o de Coordenadas
Quando voc√™ insere coordenadas no formato "52¬∞ 4.229'O", o sistema est√° simplificando apenas para "52", ignorando os minutos e a dire√ß√£o (Oeste).

Solu√ß√£o Proposta:
typescript
// Fun√ß√£o para converter formato DMS (graus, minutos, segundos) para decimal
function parseDMS(coordinate: string): number {
  const parts = coordinate.split(/[¬∞'\s,]+/);
  let degrees = parseFloat(parts[0]);
  let minutes = parts[1] ? parseFloat(parts[1]) : 0;
  let seconds = parts[2] ? parseFloat(parts[2]) : 0;
  let direction = coordinate.toUpperCase().includes('O') || coordinate.toUpperCase().includes('S') ? -1 : 1;

  return direction * (degrees + (minutes / 60) + (seconds / 3600));
}

// Uso:
const longitude = parseDMS("52¬∞ 4.229'O"); // Retorna -52.070483
const latitude = parseDMS("23¬∞ 12.456'S");  // Retorna -23.2076
2. Problema com o Bot√£o de Adicionar Coordenadas
Quando voc√™ clica no bot√£o para adicionar a coordenada no mapa, nada acontece e a atividade n√£o √© cadastrada.

Poss√≠veis causas e solu√ß√µes:
a) Event Listener n√£o est√° funcionando:

typescript
// Verifique se o evento est√° sendo adicionado corretamente
useEffect(() => {
  if (mapRef.current) {
    mapRef.current.on('click', (e) => {
      console.log('Map click:', e.latlng); // Verifique se este log aparece
      setCoordinates({
        lat: e.latlng.lat,
        lng: e.latlng.lng
      });
    });
  }

  return () => {
    if (mapRef.current) {
      mapRef.current.off('click'); // Limpeza do evento
    }
  };
}, []);
b) Estado n√£o est√° atualizando:

typescript
// Verifique se o estado est√° sendo atualizado corretamente
const [coordinates, setCoordinates] = useState<{lat: number | null, lng: number | null}>({
  lat: null,
  lng: null
});

// Adicione este useEffect para debug
useEffect(() => {
  console.log('Coordinates updated:', coordinates);
}, [coordinates]);
c) Problema com o Firebase:

typescript
// Verifique a fun√ß√£o de cadastro
const handleSubmit = async () => {
  if (!coordinates.lat || !coordinates.lng) {
    alert('Por favor, selecione uma localiza√ß√£o no mapa');
    return;
  }

  try {
    const docRef = await addDoc(collection(db, 'activities'), {
      ...formData,
      coordinates: new GeoPoint(coordinates.lat, coordinates.lng),
      createdAt: serverTimestamp()
    });
    console.log('Document written with ID: ', docRef.id);
    alert('Atividade cadastrada com sucesso!');
  } catch (e) {
    console.error('Error adding document: ', e);
    alert('Erro ao cadastrar atividade');
  }
};
Implementa√ß√£o Completa da Solu√ß√£o
Atualize o componente de entrada de coordenadas:

typescript
function CoordinateInput({ value, onChange }: { value: string, onChange: (value: string) => void }) {
  const [decimalValue, setDecimalValue] = useState('');

  const handleBlur = () => {
    try {
      const decimal = parseDMS(value);
      setDecimalValue(decimal.toFixed(6));
      onChange(decimal.toString());
    } catch (e) {
      alert('Formato de coordenada inv√°lido. Use "graus¬∞ minutos.dire√ß√£o" (ex: 52¬∞ 4.229\'O)');
    }
  };

  return (
    <div>
      <input
        value={value}
        onChange={(e) => onChange(e.target.value)}
        onBlur={handleBlur}
        placeholder="Ex: 52¬∞ 4.229'O"
      />
      {decimalValue && <span> (Decimal: {decimalValue})</span>}
    </div>
  );
}
Verifique a conex√£o com o mapa:

typescript
function MapInteraction({ onCoordinateSelect }: { onCoordinateSelect: (lat: number, lng: number) => void }) {
  const map = useMapEvents({
    click: (e) => {
      console.log('Map clicked', e.latlng);
      onCoordinateSelect(e.latlng.lat, e.latlng.lng);
      
      // Adiciona um marcador tempor√°rio para feedback visual
      L.marker(e.latlng, {
        icon: L.divIcon({
          className: 'temp-marker',
          html: 'üìç',
          iconSize: [30, 30]
        })
      }).addTo(map);
    }
  });

  return null;
}
Estilos adicionais (opcional):

css
.temp-marker {
  animation: pulse 0.5s 2;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}