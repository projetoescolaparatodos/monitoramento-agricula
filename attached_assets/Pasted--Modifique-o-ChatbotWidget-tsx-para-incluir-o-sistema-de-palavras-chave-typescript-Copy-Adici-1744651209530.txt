 Modifique o ChatbotWidget.tsx para incluir o sistema de palavras-chave:
typescript
Copy
// Adicione no início do arquivo:
import { keywordMap, findBestKeywordMatch } from '@/lib/keywordMatcher';

// Atualize a função tryProgrammaticFlow:
const tryProgrammaticFlow = (userMessage: string) => {
  // 1. Primeiro tente correspondência exata com respostas treinadas
  const normalizedUserMessage = userMessage.toLowerCase().trim();
  const exactMatch = trainedResponses.find(
    item => item.question.toLowerCase().trim() === normalizedUserMessage
  );
  
  if (exactMatch) {
    return { shouldRespond: true, response: exactMatch.answer };
  }

  // 2. Tente identificar palavras-chave
  const matchedKeyword = findBestKeywordMatch(userMessage);
  
  if (matchedKeyword) {
    const keywordData = keywordMap[matchedKeyword];
    const randomResponse = keywordData.responses[
      Math.floor(Math.random() * keywordData.responses.length)
    ];
    
    if (keywordData.suggestions) {
      setSuggestions(keywordData.suggestions);
    }
    
    if (keywordData.action) {
      if (keywordData.action.startsWith('abrirFormulario')) {
        const formType = keywordData.action.match(/'([^']+)'/)?.[1];
        if (formType) {
          abrirFormulario(formType);
          return { shouldRespond: true, response: randomResponse };
        }
      } else {
        setActiveFluxo(keywordData.action);
      }
    }
    
    return { shouldRespond: true, response: randomResponse };
  }

  // 3. Continue com a lógica existente de fluxo programático
  // ... (restante da sua função existente)

  return { shouldRespond: false, response: "" };
};
3. Adicione um sistema de aprendizado de palavras-chave:
typescript
Copy
// Adicione esta função no componente
const learnFromFeedback = async (question: string, isGood: boolean) => {
  if (!isGood) return;

  // Extrai palavras significativas (com mais de 3 letras)
  const meaningfulWords = question
    .toLowerCase()
    .split(/\s+/)
    .filter(word => word.length > 3)
    .filter(word => !['como', 'qual', 'quais', 'onde'].includes(word));

  if (meaningfulWords.length === 0) return;

  try {
    await addDoc(collection(db, 'keyword_learning'), {
      question,
      keywords: meaningfulWords,
      timestamp: serverTimestamp(),
      context: activeFluxo
    });
  } catch (error) {
    console.error("Erro ao aprender palavras-chave:", error);
  }
};

// Atualize a função rateResponse para usar o aprendizado
const rateResponse = async (messageIndex: number, isGood: boolean) => {
  try {
    const question = messages[messageIndex - 1]?.text || '';
    const answer = messages[messageIndex].text;

    await addDoc(collection(db, 'ai_feedback'), {
      question,
      answer,
      isGood,
      timestamp: serverTimestamp()
    });

    if (isGood) {
      await learnFromFeedback(question, isGood);
      addMessage("Obrigado pelo feedback! Vou usar isso para melhorar.", false);
    } else {
      addMessage("Obrigado pelo feedback. Qual resposta você esperava?", false);
    }
  } catch (error) {
    console.error("Erro ao salvar feedback:", error);
  }
};