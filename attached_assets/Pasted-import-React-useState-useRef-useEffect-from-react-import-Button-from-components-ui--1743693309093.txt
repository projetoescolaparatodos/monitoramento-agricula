import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { MessageCircle, Send, X } from 'lucide-react';

interface Message {
  text: string;
  isUser: boolean;
  timestamp: Date;
}

// Definindo respostas do chatbot baseadas em palavras-chave
const botResponses = [
  {
    keywords: ['olá', 'oi', 'hey', 'bom dia', 'boa tarde', 'boa noite'],
    response: 'Olá! Sou o assistente virtual da Secretaria de Agricultura. Como posso ajudar você hoje?'
  },
  {
    keywords: ['serviço', 'serviços', 'ajuda', 'atendimento'],
    response: 'Oferecemos diversos serviços para agricultores. Em qual área você precisa de ajuda?\n\n1. Agricultura\n2. Pesca\n3. Programa de Aquisição de Alimentos (PAA)'
  },
  {
    keywords: ['agricultura', 'plantar', 'plantação', 'cultivo', 'sementes', 'horta'],
    response: 'Nossa Secretaria de Agricultura oferece diversos serviços como assistência técnica, mecanização agrícola e distribuição de mudas. Gostaria de fazer um cadastro para solicitar algum desses serviços?'
  },
  {
    keywords: ['pesca', 'pescador', 'peixe', 'rio', 'barco', 'rede'],
    response: 'O setor de Pesca oferece apoio aos pescadores locais com licenças, auxílios e programas de capacitação. Posso ajudar você a iniciar um cadastro para algum desses serviços?'
  },
  {
    keywords: ['paa', 'programa', 'aquisição', 'alimentos', 'vender', 'venda'],
    response: 'O Programa de Aquisição de Alimentos (PAA) permite que agricultores familiares vendam seus produtos para o governo. Você já está cadastrado no programa ou gostaria de informações sobre como participar?'
  },
  {
    keywords: ['cadastro', 'cadastrar', 'registrar', 'registro', 'formulário'],
    response: 'Para iniciar seu cadastro, precisarei de algumas informações. Primeiro, poderia me informar seu nome completo?'
  },
  {
    keywords: ['contato', 'telefone', 'endereço', 'email', 'falar', 'atendente'],
    response: 'Para falar com um atendente, você pode ligar para (XX) XXXX-XXXX ou visitar nossa secretaria na Rua Principal, nº 123, Centro. Nosso horário de atendimento é de segunda a sexta, das 8h às 17h.'
  }
];

// Fluxo de perguntas para cadastro
const cadastroFluxo = [
  'Obrigado! Agora, preciso do seu CPF ou CNPJ:',
  'Qual é o seu endereço completo?',
  'Qual o tamanho aproximado da sua propriedade (em hectares)?',
  'Qual a principal atividade que você desenvolve?',
  'Qual serviço específico você está buscando?',
  'Obrigado pelas informações! Seu cadastro foi iniciado com sucesso. Um técnico da secretaria entrará em contato em até 3 dias úteis para dar continuidade ao seu atendimento.'
];

const ChatbotWidget: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [cadastroEtapa, setCadastroEtapa] = useState(-1); // -1 indica que não está em cadastro
  const [cadastroRespostas, setCadastroRespostas] = useState<string[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Inicialização do chatbot
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      // Mensagem de boas-vindas
      setMessages([
        {
          text: 'Olá! Sou o assistente virtual da Secretaria de Agricultura, Pesca e Abastecimento. Como posso ajudar você hoje?',
          isUser: false,
          timestamp: new Date()
        }
      ]);
    }
  }, [isOpen]);

  // Scroll para a última mensagem
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Função para encontrar resposta baseada em palavras-chave
  const findResponse = (userMessage: string): string => {
    const lowercaseMsg = userMessage.toLowerCase();
    
    for (const item of botResponses) {
      if (item.keywords.some(keyword => lowercaseMsg.includes(keyword))) {
        return item.response;
      }
    }
    
    return 'Desculpe, não entendi completamente. Você pode tentar reformular sua pergunta? Ou escolher um destes tópicos:\n\n- Serviços de agricultura\n- Serviços de pesca\n- Programa PAA\n- Fazer um cadastro';
  };

  // Processar mensagem do usuário
  const processUserMessage = async (userMessage: string) => {
    setIsLoading(true);
    
    // Simular delay para parecer mais natural
    await new Promise(resolve => setTimeout(resolve, 800));
    
    let botResponse: string;
    
    // Verificar se está em fluxo de cadastro
    if (cadastroEtapa >= 0) {
      // Salvar resposta do usuário
      const novasRespostas = [...cadastroRespostas, userMessage];
      setCadastroRespostas(novasRespostas);
      
      // Avançar para próxima etapa
      const novaEtapa = cadastroEtapa + 1;
      setCadastroEtapa(novaEtapa);
      
      // Verificar se o fluxo de cadastro acabou
      if (novaEtapa >= cadastroFluxo.length) {
        botResponse = 'Obrigado pelas informações! Seu cadastro foi iniciado com sucesso. Um técnico da secretaria entrará em contato em até 3 dias úteis para dar continuidade ao seu atendimento.';
        
        // Aqui você enviaria os dados para seu backend
        console.log('Dados de cadastro coletados:', novasRespostas);
        
        // Resetar estado do cadastro
        setCadastroEtapa(-1);
        setCadastroRespostas([]);
      } else {
        // Continuar com o fluxo de perguntas
        botResponse = cadastroFluxo[novaEtapa];
      }
    } else {
      // Verificar se deve iniciar cadastro
      if (userMessage.toLowerCase().includes('cadastro') || 
          userMessage.toLowerCase().includes('registrar') || 
          userMessage.toLowerCase().includes('sim')) {
        botResponse = 'Vamos iniciar seu cadastro! Primeiro, poderia me informar seu nome completo?';
        setCadastroEtapa(0);
      } else {
        // Resposta normal baseada em palavras-chave
        botResponse = findResponse(userMessage);
      }
    }
    
    setMessages(prev => [...prev, {
      text: botResponse,
      isUser: false,
      timestamp: new Date()
    }]);
    
    setIsLoading(false);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;
    
    // Adicionar mensagem do usuário
    setMessages(prev => [...prev, {
      text: input,
      isUser: true,
      timestamp: new Date()
    }]);
    
    // Processar mensagem do usuário
    processUserMessage(input);
    
    // Limpar input
    setInput('');
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen ? (
        <Button 
          onClick={() => setIsOpen(true)} 
          className="rounded-full w-14 h-14 bg-green-600 hover:bg-green-700 text-white shadow-lg flex items-center justify-center"
        >
          <MessageCircle size={24} />
        </Button>
      ) : (
        <Card className="w-80 sm:w-96 h-[500px] shadow-xl flex flex-col bg-white">
          <div className="bg-green-600 text-white p-3 flex justify-between items-center rounded-t-lg">
            <h3 className="font-medium">Assistente Virtual da Agricultura</h3>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setIsOpen(false)} 
              className="text-white hover:bg-green-700 h-8 w-8 p-0"
            >
              <X size={20} />
            </Button>
          </div>
          
          <CardContent className="p-0 flex-1 flex flex-col">
            <div className="flex-1 overflow-y-auto p-4">
              {messages.map((msg, idx) => (
                <div 
                  key={idx} 
                  className={`mb-4 ${msg.isUser ? 'text-right' : 'text-left'}`}
                >
                  <div 
                    className={`inline-block p-3 rounded-lg max-w-[80%] ${
                      msg.isUser 
                        ? 'bg-green-600 text-white rounded-tr-none' 
                        : 'bg-gray-100 text-gray-800 rounded-tl-none'
                    }`}
                  >
                    {msg.text.split('\n').map((line, i) => (
                      <React.Fragment key={i}>
                        {line}
                        {i < msg.text.split('\n').length - 1 && <br />}
                      </React.Fragment>
                    ))}
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="text-left mb-4">
                  <div className="inline-block p-3 rounded-lg bg-gray-100 text-gray-800 rounded-tl-none">
                    <div className="flex space-x-2">
                      <div className="h-2 w-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="h-2 w-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      <div className="h-2 w-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.4s'}}></div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
            
            <form onSubmit={handleSubmit} className="p-3 border-t flex">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Digite sua mensagem..."
                className="flex-1 focus-visible:ring-green-600"
                disabled={isLoading}
              />
              <Button 
                type="submit" 
                size="icon" 
                disabled={isLoading || !input.trim()}
                className="ml-2 bg-green-600 hover:bg-green-700"
              >
                <Send size={18} />
              </Button>
            </form>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ChatbotWidget;